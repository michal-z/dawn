{"include/dawn/webgpu.h": "// BSD 3-Clause License\n//\n// Copyright (c) 2019, \"WebGPU native\" developers\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n// 1. Redistributions of source code must retain the above copyright notice, this\n//    list of conditions and the following disclaimer.\n//\n// 2. Redistributions in binary form must reproduce the above copyright notice,\n//    this list of conditions and the following disclaimer in the documentation\n//    and/or other materials provided with the distribution.\n//\n// 3. Neither the name of the copyright holder nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#ifdef __EMSCRIPTEN__\n#error \"Do not include this header. Emscripten already provides headers needed for WebGPU.\"\n#endif\n#ifndef WEBGPU_H_\n#define WEBGPU_H_\n\n#if defined(WGPU_SHARED_LIBRARY)\n#    if defined(_WIN32)\n#        if defined(WGPU_IMPLEMENTATION)\n#            define WGPU_EXPORT __declspec(dllexport)\n#        else\n#            define WGPU_EXPORT __declspec(dllimport)\n#        endif\n#    else  // defined(_WIN32)\n#        if defined(WGPU_IMPLEMENTATION)\n#            define WGPU_EXPORT __attribute__((visibility(\"default\")))\n#        else\n#            define WGPU_EXPORT\n#        endif\n#    endif  // defined(_WIN32)\n#else       // defined(WGPU_SHARED_LIBRARY)\n#    define WGPU_EXPORT\n#endif  // defined(WGPU_SHARED_LIBRARY)\n\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n#define WGPU_ARRAY_LAYER_COUNT_UNDEFINED (0xffffffffUL)\n#define WGPU_COPY_STRIDE_UNDEFINED (0xffffffffUL)\n#define WGPU_LIMIT_U32_UNDEFINED (0xffffffffUL)\n#define WGPU_LIMIT_U64_UNDEFINED (0xffffffffffffffffULL)\n#define WGPU_MIP_LEVEL_COUNT_UNDEFINED (0xffffffffUL)\n#define WGPU_STRIDE_UNDEFINED (0xffffffffUL)\n#define WGPU_WHOLE_MAP_SIZE SIZE_MAX\n#define WGPU_WHOLE_SIZE (0xffffffffffffffffULL)\n\ntypedef uint32_t WGPUFlags;\n\ntypedef struct WGPUAdapterImpl* WGPUAdapter;\ntypedef struct WGPUBindGroupImpl* WGPUBindGroup;\ntypedef struct WGPUBindGroupLayoutImpl* WGPUBindGroupLayout;\ntypedef struct WGPUBufferImpl* WGPUBuffer;\ntypedef struct WGPUCommandBufferImpl* WGPUCommandBuffer;\ntypedef struct WGPUCommandEncoderImpl* WGPUCommandEncoder;\ntypedef struct WGPUComputePassEncoderImpl* WGPUComputePassEncoder;\ntypedef struct WGPUComputePipelineImpl* WGPUComputePipeline;\ntypedef struct WGPUDeviceImpl* WGPUDevice;\ntypedef struct WGPUExternalTextureImpl* WGPUExternalTexture;\ntypedef struct WGPUInstanceImpl* WGPUInstance;\ntypedef struct WGPUPipelineLayoutImpl* WGPUPipelineLayout;\ntypedef struct WGPUQuerySetImpl* WGPUQuerySet;\ntypedef struct WGPUQueueImpl* WGPUQueue;\ntypedef struct WGPURenderBundleImpl* WGPURenderBundle;\ntypedef struct WGPURenderBundleEncoderImpl* WGPURenderBundleEncoder;\ntypedef struct WGPURenderPassEncoderImpl* WGPURenderPassEncoder;\ntypedef struct WGPURenderPipelineImpl* WGPURenderPipeline;\ntypedef struct WGPUSamplerImpl* WGPUSampler;\ntypedef struct WGPUShaderModuleImpl* WGPUShaderModule;\ntypedef struct WGPUSurfaceImpl* WGPUSurface;\ntypedef struct WGPUSwapChainImpl* WGPUSwapChain;\ntypedef struct WGPUTextureImpl* WGPUTexture;\ntypedef struct WGPUTextureViewImpl* WGPUTextureView;\n\ntypedef enum WGPUAdapterType {\n    WGPUAdapterType_DiscreteGPU = 0x00000000,\n    WGPUAdapterType_IntegratedGPU = 0x00000001,\n    WGPUAdapterType_CPU = 0x00000002,\n    WGPUAdapterType_Unknown = 0x00000003,\n    WGPUAdapterType_Force32 = 0x7FFFFFFF\n} WGPUAdapterType;\n\ntypedef enum WGPUAddressMode {\n    WGPUAddressMode_Repeat = 0x00000000,\n    WGPUAddressMode_MirrorRepeat = 0x00000001,\n    WGPUAddressMode_ClampToEdge = 0x00000002,\n    WGPUAddressMode_Force32 = 0x7FFFFFFF\n} WGPUAddressMode;\n\ntypedef enum WGPUAlphaMode {\n    WGPUAlphaMode_Premultiplied = 0x00000000,\n    WGPUAlphaMode_Unpremultiplied = 0x00000001,\n    WGPUAlphaMode_Opaque = 0x00000002,\n    WGPUAlphaMode_Force32 = 0x7FFFFFFF\n} WGPUAlphaMode;\n\ntypedef enum WGPUBackendType {\n    WGPUBackendType_Null = 0x00000000,\n    WGPUBackendType_WebGPU = 0x00000001,\n    WGPUBackendType_D3D11 = 0x00000002,\n    WGPUBackendType_D3D12 = 0x00000003,\n    WGPUBackendType_Metal = 0x00000004,\n    WGPUBackendType_Vulkan = 0x00000005,\n    WGPUBackendType_OpenGL = 0x00000006,\n    WGPUBackendType_OpenGLES = 0x00000007,\n    WGPUBackendType_Force32 = 0x7FFFFFFF\n} WGPUBackendType;\n\ntypedef enum WGPUBlendFactor {\n    WGPUBlendFactor_Zero = 0x00000000,\n    WGPUBlendFactor_One = 0x00000001,\n    WGPUBlendFactor_Src = 0x00000002,\n    WGPUBlendFactor_OneMinusSrc = 0x00000003,\n    WGPUBlendFactor_SrcAlpha = 0x00000004,\n    WGPUBlendFactor_OneMinusSrcAlpha = 0x00000005,\n    WGPUBlendFactor_Dst = 0x00000006,\n    WGPUBlendFactor_OneMinusDst = 0x00000007,\n    WGPUBlendFactor_DstAlpha = 0x00000008,\n    WGPUBlendFactor_OneMinusDstAlpha = 0x00000009,\n    WGPUBlendFactor_SrcAlphaSaturated = 0x0000000A,\n    WGPUBlendFactor_Constant = 0x0000000B,\n    WGPUBlendFactor_OneMinusConstant = 0x0000000C,\n    WGPUBlendFactor_Force32 = 0x7FFFFFFF\n} WGPUBlendFactor;\n\ntypedef enum WGPUBlendOperation {\n    WGPUBlendOperation_Add = 0x00000000,\n    WGPUBlendOperation_Subtract = 0x00000001,\n    WGPUBlendOperation_ReverseSubtract = 0x00000002,\n    WGPUBlendOperation_Min = 0x00000003,\n    WGPUBlendOperation_Max = 0x00000004,\n    WGPUBlendOperation_Force32 = 0x7FFFFFFF\n} WGPUBlendOperation;\n\ntypedef enum WGPUBufferBindingType {\n    WGPUBufferBindingType_Undefined = 0x00000000,\n    WGPUBufferBindingType_Uniform = 0x00000001,\n    WGPUBufferBindingType_Storage = 0x00000002,\n    WGPUBufferBindingType_ReadOnlyStorage = 0x00000003,\n    WGPUBufferBindingType_Force32 = 0x7FFFFFFF\n} WGPUBufferBindingType;\n\ntypedef enum WGPUBufferMapAsyncStatus {\n    WGPUBufferMapAsyncStatus_Success = 0x00000000,\n    WGPUBufferMapAsyncStatus_Error = 0x00000001,\n    WGPUBufferMapAsyncStatus_Unknown = 0x00000002,\n    WGPUBufferMapAsyncStatus_DeviceLost = 0x00000003,\n    WGPUBufferMapAsyncStatus_DestroyedBeforeCallback = 0x00000004,\n    WGPUBufferMapAsyncStatus_UnmappedBeforeCallback = 0x00000005,\n    WGPUBufferMapAsyncStatus_Force32 = 0x7FFFFFFF\n} WGPUBufferMapAsyncStatus;\n\ntypedef enum WGPUCompareFunction {\n    WGPUCompareFunction_Undefined = 0x00000000,\n    WGPUCompareFunction_Never = 0x00000001,\n    WGPUCompareFunction_Less = 0x00000002,\n    WGPUCompareFunction_LessEqual = 0x00000003,\n    WGPUCompareFunction_Greater = 0x00000004,\n    WGPUCompareFunction_GreaterEqual = 0x00000005,\n    WGPUCompareFunction_Equal = 0x00000006,\n    WGPUCompareFunction_NotEqual = 0x00000007,\n    WGPUCompareFunction_Always = 0x00000008,\n    WGPUCompareFunction_Force32 = 0x7FFFFFFF\n} WGPUCompareFunction;\n\ntypedef enum WGPUCompilationInfoRequestStatus {\n    WGPUCompilationInfoRequestStatus_Success = 0x00000000,\n    WGPUCompilationInfoRequestStatus_Error = 0x00000001,\n    WGPUCompilationInfoRequestStatus_DeviceLost = 0x00000002,\n    WGPUCompilationInfoRequestStatus_Unknown = 0x00000003,\n    WGPUCompilationInfoRequestStatus_Force32 = 0x7FFFFFFF\n} WGPUCompilationInfoRequestStatus;\n\ntypedef enum WGPUCompilationMessageType {\n    WGPUCompilationMessageType_Error = 0x00000000,\n    WGPUCompilationMessageType_Warning = 0x00000001,\n    WGPUCompilationMessageType_Info = 0x00000002,\n    WGPUCompilationMessageType_Force32 = 0x7FFFFFFF\n} WGPUCompilationMessageType;\n\ntypedef enum WGPUComputePassTimestampLocation {\n    WGPUComputePassTimestampLocation_Beginning = 0x00000000,\n    WGPUComputePassTimestampLocation_End = 0x00000001,\n    WGPUComputePassTimestampLocation_Force32 = 0x7FFFFFFF\n} WGPUComputePassTimestampLocation;\n\ntypedef enum WGPUCreatePipelineAsyncStatus {\n    WGPUCreatePipelineAsyncStatus_Success = 0x00000000,\n    WGPUCreatePipelineAsyncStatus_Error = 0x00000001,\n    WGPUCreatePipelineAsyncStatus_DeviceLost = 0x00000002,\n    WGPUCreatePipelineAsyncStatus_DeviceDestroyed = 0x00000003,\n    WGPUCreatePipelineAsyncStatus_Unknown = 0x00000004,\n    WGPUCreatePipelineAsyncStatus_Force32 = 0x7FFFFFFF\n} WGPUCreatePipelineAsyncStatus;\n\ntypedef enum WGPUCullMode {\n    WGPUCullMode_None = 0x00000000,\n    WGPUCullMode_Front = 0x00000001,\n    WGPUCullMode_Back = 0x00000002,\n    WGPUCullMode_Force32 = 0x7FFFFFFF\n} WGPUCullMode;\n\ntypedef enum WGPUDeviceLostReason {\n    WGPUDeviceLostReason_Undefined = 0x00000000,\n    WGPUDeviceLostReason_Destroyed = 0x00000001,\n    WGPUDeviceLostReason_Force32 = 0x7FFFFFFF\n} WGPUDeviceLostReason;\n\ntypedef enum WGPUErrorFilter {\n    WGPUErrorFilter_Validation = 0x00000000,\n    WGPUErrorFilter_OutOfMemory = 0x00000001,\n    WGPUErrorFilter_Internal = 0x00000002,\n    WGPUErrorFilter_Force32 = 0x7FFFFFFF\n} WGPUErrorFilter;\n\ntypedef enum WGPUErrorType {\n    WGPUErrorType_NoError = 0x00000000,\n    WGPUErrorType_Validation = 0x00000001,\n    WGPUErrorType_OutOfMemory = 0x00000002,\n    WGPUErrorType_Internal = 0x00000003,\n    WGPUErrorType_Unknown = 0x00000004,\n    WGPUErrorType_DeviceLost = 0x00000005,\n    WGPUErrorType_Force32 = 0x7FFFFFFF\n} WGPUErrorType;\n\ntypedef enum WGPUFeatureName {\n    WGPUFeatureName_Undefined = 0x00000000,\n    WGPUFeatureName_DepthClipControl = 0x00000001,\n    WGPUFeatureName_Depth32FloatStencil8 = 0x00000002,\n    WGPUFeatureName_TimestampQuery = 0x00000003,\n    WGPUFeatureName_PipelineStatisticsQuery = 0x00000004,\n    WGPUFeatureName_TextureCompressionBC = 0x00000005,\n    WGPUFeatureName_TextureCompressionETC2 = 0x00000006,\n    WGPUFeatureName_TextureCompressionASTC = 0x00000007,\n    WGPUFeatureName_IndirectFirstInstance = 0x00000008,\n    WGPUFeatureName_ShaderF16 = 0x00000009,\n    WGPUFeatureName_RG11B10UfloatRenderable = 0x0000000A,\n    WGPUFeatureName_DawnShaderFloat16 = 0x000003E9,\n    WGPUFeatureName_DawnInternalUsages = 0x000003EA,\n    WGPUFeatureName_DawnMultiPlanarFormats = 0x000003EB,\n    WGPUFeatureName_DawnNative = 0x000003EC,\n    WGPUFeatureName_ChromiumExperimentalDp4a = 0x000003ED,\n    WGPUFeatureName_TimestampQueryInsidePasses = 0x000003EE,\n    WGPUFeatureName_Force32 = 0x7FFFFFFF\n} WGPUFeatureName;\n\ntypedef enum WGPUFilterMode {\n    WGPUFilterMode_Nearest = 0x00000000,\n    WGPUFilterMode_Linear = 0x00000001,\n    WGPUFilterMode_Force32 = 0x7FFFFFFF\n} WGPUFilterMode;\n\ntypedef enum WGPUFrontFace {\n    WGPUFrontFace_CCW = 0x00000000,\n    WGPUFrontFace_CW = 0x00000001,\n    WGPUFrontFace_Force32 = 0x7FFFFFFF\n} WGPUFrontFace;\n\ntypedef enum WGPUIndexFormat {\n    WGPUIndexFormat_Undefined = 0x00000000,\n    WGPUIndexFormat_Uint16 = 0x00000001,\n    WGPUIndexFormat_Uint32 = 0x00000002,\n    WGPUIndexFormat_Force32 = 0x7FFFFFFF\n} WGPUIndexFormat;\n\ntypedef enum WGPULoadOp {\n    WGPULoadOp_Undefined = 0x00000000,\n    WGPULoadOp_Clear = 0x00000001,\n    WGPULoadOp_Load = 0x00000002,\n    WGPULoadOp_Force32 = 0x7FFFFFFF\n} WGPULoadOp;\n\ntypedef enum WGPULoggingType {\n    WGPULoggingType_Verbose = 0x00000000,\n    WGPULoggingType_Info = 0x00000001,\n    WGPULoggingType_Warning = 0x00000002,\n    WGPULoggingType_Error = 0x00000003,\n    WGPULoggingType_Force32 = 0x7FFFFFFF\n} WGPULoggingType;\n\ntypedef enum WGPUPipelineStatisticName {\n    WGPUPipelineStatisticName_VertexShaderInvocations = 0x00000000,\n    WGPUPipelineStatisticName_ClipperInvocations = 0x00000001,\n    WGPUPipelineStatisticName_ClipperPrimitivesOut = 0x00000002,\n    WGPUPipelineStatisticName_FragmentShaderInvocations = 0x00000003,\n    WGPUPipelineStatisticName_ComputeShaderInvocations = 0x00000004,\n    WGPUPipelineStatisticName_Force32 = 0x7FFFFFFF\n} WGPUPipelineStatisticName;\n\ntypedef enum WGPUPowerPreference {\n    WGPUPowerPreference_Undefined = 0x00000000,\n    WGPUPowerPreference_LowPower = 0x00000001,\n    WGPUPowerPreference_HighPerformance = 0x00000002,\n    WGPUPowerPreference_Force32 = 0x7FFFFFFF\n} WGPUPowerPreference;\n\ntypedef enum WGPUPresentMode {\n    WGPUPresentMode_Immediate = 0x00000000,\n    WGPUPresentMode_Mailbox = 0x00000001,\n    WGPUPresentMode_Fifo = 0x00000002,\n    WGPUPresentMode_Force32 = 0x7FFFFFFF\n} WGPUPresentMode;\n\ntypedef enum WGPUPrimitiveTopology {\n    WGPUPrimitiveTopology_PointList = 0x00000000,\n    WGPUPrimitiveTopology_LineList = 0x00000001,\n    WGPUPrimitiveTopology_LineStrip = 0x00000002,\n    WGPUPrimitiveTopology_TriangleList = 0x00000003,\n    WGPUPrimitiveTopology_TriangleStrip = 0x00000004,\n    WGPUPrimitiveTopology_Force32 = 0x7FFFFFFF\n} WGPUPrimitiveTopology;\n\ntypedef enum WGPUQueryType {\n    WGPUQueryType_Occlusion = 0x00000000,\n    WGPUQueryType_PipelineStatistics = 0x00000001,\n    WGPUQueryType_Timestamp = 0x00000002,\n    WGPUQueryType_Force32 = 0x7FFFFFFF\n} WGPUQueryType;\n\ntypedef enum WGPUQueueWorkDoneStatus {\n    WGPUQueueWorkDoneStatus_Success = 0x00000000,\n    WGPUQueueWorkDoneStatus_Error = 0x00000001,\n    WGPUQueueWorkDoneStatus_Unknown = 0x00000002,\n    WGPUQueueWorkDoneStatus_DeviceLost = 0x00000003,\n    WGPUQueueWorkDoneStatus_Force32 = 0x7FFFFFFF\n} WGPUQueueWorkDoneStatus;\n\ntypedef enum WGPURenderPassTimestampLocation {\n    WGPURenderPassTimestampLocation_Beginning = 0x00000000,\n    WGPURenderPassTimestampLocation_End = 0x00000001,\n    WGPURenderPassTimestampLocation_Force32 = 0x7FFFFFFF\n} WGPURenderPassTimestampLocation;\n\ntypedef enum WGPURequestAdapterStatus {\n    WGPURequestAdapterStatus_Success = 0x00000000,\n    WGPURequestAdapterStatus_Unavailable = 0x00000001,\n    WGPURequestAdapterStatus_Error = 0x00000002,\n    WGPURequestAdapterStatus_Unknown = 0x00000003,\n    WGPURequestAdapterStatus_Force32 = 0x7FFFFFFF\n} WGPURequestAdapterStatus;\n\ntypedef enum WGPURequestDeviceStatus {\n    WGPURequestDeviceStatus_Success = 0x00000000,\n    WGPURequestDeviceStatus_Error = 0x00000001,\n    WGPURequestDeviceStatus_Unknown = 0x00000002,\n    WGPURequestDeviceStatus_Force32 = 0x7FFFFFFF\n} WGPURequestDeviceStatus;\n\ntypedef enum WGPUSType {\n    WGPUSType_Invalid = 0x00000000,\n    WGPUSType_SurfaceDescriptorFromMetalLayer = 0x00000001,\n    WGPUSType_SurfaceDescriptorFromWindowsHWND = 0x00000002,\n    WGPUSType_SurfaceDescriptorFromXlibWindow = 0x00000003,\n    WGPUSType_SurfaceDescriptorFromCanvasHTMLSelector = 0x00000004,\n    WGPUSType_ShaderModuleSPIRVDescriptor = 0x00000005,\n    WGPUSType_ShaderModuleWGSLDescriptor = 0x00000006,\n    WGPUSType_PrimitiveDepthClipControl = 0x00000007,\n    WGPUSType_SurfaceDescriptorFromWaylandSurface = 0x00000008,\n    WGPUSType_SurfaceDescriptorFromAndroidNativeWindow = 0x00000009,\n    WGPUSType_SurfaceDescriptorFromWindowsCoreWindow = 0x0000000B,\n    WGPUSType_ExternalTextureBindingEntry = 0x0000000C,\n    WGPUSType_ExternalTextureBindingLayout = 0x0000000D,\n    WGPUSType_SurfaceDescriptorFromWindowsSwapChainPanel = 0x0000000E,\n    WGPUSType_RenderPassDescriptorMaxDrawCount = 0x0000000F,\n    WGPUSType_DawnTextureInternalUsageDescriptor = 0x000003E8,\n    WGPUSType_DawnTogglesDeviceDescriptor = 0x000003EA,\n    WGPUSType_DawnEncoderInternalUsageDescriptor = 0x000003EB,\n    WGPUSType_DawnInstanceDescriptor = 0x000003EC,\n    WGPUSType_DawnCacheDeviceDescriptor = 0x000003ED,\n    WGPUSType_DawnAdapterPropertiesPowerPreference = 0x000003EE,\n    WGPUSType_Force32 = 0x7FFFFFFF\n} WGPUSType;\n\ntypedef enum WGPUSamplerBindingType {\n    WGPUSamplerBindingType_Undefined = 0x00000000,\n    WGPUSamplerBindingType_Filtering = 0x00000001,\n    WGPUSamplerBindingType_NonFiltering = 0x00000002,\n    WGPUSamplerBindingType_Comparison = 0x00000003,\n    WGPUSamplerBindingType_Force32 = 0x7FFFFFFF\n} WGPUSamplerBindingType;\n\ntypedef enum WGPUStencilOperation {\n    WGPUStencilOperation_Keep = 0x00000000,\n    WGPUStencilOperation_Zero = 0x00000001,\n    WGPUStencilOperation_Replace = 0x00000002,\n    WGPUStencilOperation_Invert = 0x00000003,\n    WGPUStencilOperation_IncrementClamp = 0x00000004,\n    WGPUStencilOperation_DecrementClamp = 0x00000005,\n    WGPUStencilOperation_IncrementWrap = 0x00000006,\n    WGPUStencilOperation_DecrementWrap = 0x00000007,\n    WGPUStencilOperation_Force32 = 0x7FFFFFFF\n} WGPUStencilOperation;\n\ntypedef enum WGPUStorageTextureAccess {\n    WGPUStorageTextureAccess_Undefined = 0x00000000,\n    WGPUStorageTextureAccess_WriteOnly = 0x00000001,\n    WGPUStorageTextureAccess_Force32 = 0x7FFFFFFF\n} WGPUStorageTextureAccess;\n\ntypedef enum WGPUStoreOp {\n    WGPUStoreOp_Undefined = 0x00000000,\n    WGPUStoreOp_Store = 0x00000001,\n    WGPUStoreOp_Discard = 0x00000002,\n    WGPUStoreOp_Force32 = 0x7FFFFFFF\n} WGPUStoreOp;\n\ntypedef enum WGPUTextureAspect {\n    WGPUTextureAspect_All = 0x00000000,\n    WGPUTextureAspect_StencilOnly = 0x00000001,\n    WGPUTextureAspect_DepthOnly = 0x00000002,\n    WGPUTextureAspect_Plane0Only = 0x00000003,\n    WGPUTextureAspect_Plane1Only = 0x00000004,\n    WGPUTextureAspect_Force32 = 0x7FFFFFFF\n} WGPUTextureAspect;\n\ntypedef enum WGPUTextureComponentType {\n    WGPUTextureComponentType_Float = 0x00000000,\n    WGPUTextureComponentType_Sint = 0x00000001,\n    WGPUTextureComponentType_Uint = 0x00000002,\n    WGPUTextureComponentType_DepthComparison = 0x00000003,\n    WGPUTextureComponentType_Force32 = 0x7FFFFFFF\n} WGPUTextureComponentType;\n\ntypedef enum WGPUTextureDimension {\n    WGPUTextureDimension_1D = 0x00000000,\n    WGPUTextureDimension_2D = 0x00000001,\n    WGPUTextureDimension_3D = 0x00000002,\n    WGPUTextureDimension_Force32 = 0x7FFFFFFF\n} WGPUTextureDimension;\n\ntypedef enum WGPUTextureFormat {\n    WGPUTextureFormat_Undefined = 0x00000000,\n    WGPUTextureFormat_R8Unorm = 0x00000001,\n    WGPUTextureFormat_R8Snorm = 0x00000002,\n    WGPUTextureFormat_R8Uint = 0x00000003,\n    WGPUTextureFormat_R8Sint = 0x00000004,\n    WGPUTextureFormat_R16Uint = 0x00000005,\n    WGPUTextureFormat_R16Sint = 0x00000006,\n    WGPUTextureFormat_R16Float = 0x00000007,\n    WGPUTextureFormat_RG8Unorm = 0x00000008,\n    WGPUTextureFormat_RG8Snorm = 0x00000009,\n    WGPUTextureFormat_RG8Uint = 0x0000000A,\n    WGPUTextureFormat_RG8Sint = 0x0000000B,\n    WGPUTextureFormat_R32Float = 0x0000000C,\n    WGPUTextureFormat_R32Uint = 0x0000000D,\n    WGPUTextureFormat_R32Sint = 0x0000000E,\n    WGPUTextureFormat_RG16Uint = 0x0000000F,\n    WGPUTextureFormat_RG16Sint = 0x00000010,\n    WGPUTextureFormat_RG16Float = 0x00000011,\n    WGPUTextureFormat_RGBA8Unorm = 0x00000012,\n    WGPUTextureFormat_RGBA8UnormSrgb = 0x00000013,\n    WGPUTextureFormat_RGBA8Snorm = 0x00000014,\n    WGPUTextureFormat_RGBA8Uint = 0x00000015,\n    WGPUTextureFormat_RGBA8Sint = 0x00000016,\n    WGPUTextureFormat_BGRA8Unorm = 0x00000017,\n    WGPUTextureFormat_BGRA8UnormSrgb = 0x00000018,\n    WGPUTextureFormat_RGB10A2Unorm = 0x00000019,\n    WGPUTextureFormat_RG11B10Ufloat = 0x0000001A,\n    WGPUTextureFormat_RGB9E5Ufloat = 0x0000001B,\n    WGPUTextureFormat_RG32Float = 0x0000001C,\n    WGPUTextureFormat_RG32Uint = 0x0000001D,\n    WGPUTextureFormat_RG32Sint = 0x0000001E,\n    WGPUTextureFormat_RGBA16Uint = 0x0000001F,\n    WGPUTextureFormat_RGBA16Sint = 0x00000020,\n    WGPUTextureFormat_RGBA16Float = 0x00000021,\n    WGPUTextureFormat_RGBA32Float = 0x00000022,\n    WGPUTextureFormat_RGBA32Uint = 0x00000023,\n    WGPUTextureFormat_RGBA32Sint = 0x00000024,\n    WGPUTextureFormat_Stencil8 = 0x00000025,\n    WGPUTextureFormat_Depth16Unorm = 0x00000026,\n    WGPUTextureFormat_Depth24Plus = 0x00000027,\n    WGPUTextureFormat_Depth24PlusStencil8 = 0x00000028,\n    WGPUTextureFormat_Depth32Float = 0x00000029,\n    WGPUTextureFormat_Depth32FloatStencil8 = 0x0000002A,\n    WGPUTextureFormat_BC1RGBAUnorm = 0x0000002B,\n    WGPUTextureFormat_BC1RGBAUnormSrgb = 0x0000002C,\n    WGPUTextureFormat_BC2RGBAUnorm = 0x0000002D,\n    WGPUTextureFormat_BC2RGBAUnormSrgb = 0x0000002E,\n    WGPUTextureFormat_BC3RGBAUnorm = 0x0000002F,\n    WGPUTextureFormat_BC3RGBAUnormSrgb = 0x00000030,\n    WGPUTextureFormat_BC4RUnorm = 0x00000031,\n    WGPUTextureFormat_BC4RSnorm = 0x00000032,\n    WGPUTextureFormat_BC5RGUnorm = 0x00000033,\n    WGPUTextureFormat_BC5RGSnorm = 0x00000034,\n    WGPUTextureFormat_BC6HRGBUfloat = 0x00000035,\n    WGPUTextureFormat_BC6HRGBFloat = 0x00000036,\n    WGPUTextureFormat_BC7RGBAUnorm = 0x00000037,\n    WGPUTextureFormat_BC7RGBAUnormSrgb = 0x00000038,\n    WGPUTextureFormat_ETC2RGB8Unorm = 0x00000039,\n    WGPUTextureFormat_ETC2RGB8UnormSrgb = 0x0000003A,\n    WGPUTextureFormat_ETC2RGB8A1Unorm = 0x0000003B,\n    WGPUTextureFormat_ETC2RGB8A1UnormSrgb = 0x0000003C,\n    WGPUTextureFormat_ETC2RGBA8Unorm = 0x0000003D,\n    WGPUTextureFormat_ETC2RGBA8UnormSrgb = 0x0000003E,\n    WGPUTextureFormat_EACR11Unorm = 0x0000003F,\n    WGPUTextureFormat_EACR11Snorm = 0x00000040,\n    WGPUTextureFormat_EACRG11Unorm = 0x00000041,\n    WGPUTextureFormat_EACRG11Snorm = 0x00000042,\n    WGPUTextureFormat_ASTC4x4Unorm = 0x00000043,\n    WGPUTextureFormat_ASTC4x4UnormSrgb = 0x00000044,\n    WGPUTextureFormat_ASTC5x4Unorm = 0x00000045,\n    WGPUTextureFormat_ASTC5x4UnormSrgb = 0x00000046,\n    WGPUTextureFormat_ASTC5x5Unorm = 0x00000047,\n    WGPUTextureFormat_ASTC5x5UnormSrgb = 0x00000048,\n    WGPUTextureFormat_ASTC6x5Unorm = 0x00000049,\n    WGPUTextureFormat_ASTC6x5UnormSrgb = 0x0000004A,\n    WGPUTextureFormat_ASTC6x6Unorm = 0x0000004B,\n    WGPUTextureFormat_ASTC6x6UnormSrgb = 0x0000004C,\n    WGPUTextureFormat_ASTC8x5Unorm = 0x0000004D,\n    WGPUTextureFormat_ASTC8x5UnormSrgb = 0x0000004E,\n    WGPUTextureFormat_ASTC8x6Unorm = 0x0000004F,\n    WGPUTextureFormat_ASTC8x6UnormSrgb = 0x00000050,\n    WGPUTextureFormat_ASTC8x8Unorm = 0x00000051,\n    WGPUTextureFormat_ASTC8x8UnormSrgb = 0x00000052,\n    WGPUTextureFormat_ASTC10x5Unorm = 0x00000053,\n    WGPUTextureFormat_ASTC10x5UnormSrgb = 0x00000054,\n    WGPUTextureFormat_ASTC10x6Unorm = 0x00000055,\n    WGPUTextureFormat_ASTC10x6UnormSrgb = 0x00000056,\n    WGPUTextureFormat_ASTC10x8Unorm = 0x00000057,\n    WGPUTextureFormat_ASTC10x8UnormSrgb = 0x00000058,\n    WGPUTextureFormat_ASTC10x10Unorm = 0x00000059,\n    WGPUTextureFormat_ASTC10x10UnormSrgb = 0x0000005A,\n    WGPUTextureFormat_ASTC12x10Unorm = 0x0000005B,\n    WGPUTextureFormat_ASTC12x10UnormSrgb = 0x0000005C,\n    WGPUTextureFormat_ASTC12x12Unorm = 0x0000005D,\n    WGPUTextureFormat_ASTC12x12UnormSrgb = 0x0000005E,\n    WGPUTextureFormat_R8BG8Biplanar420Unorm = 0x0000005F,\n    WGPUTextureFormat_Force32 = 0x7FFFFFFF\n} WGPUTextureFormat;\n\ntypedef enum WGPUTextureSampleType {\n    WGPUTextureSampleType_Undefined = 0x00000000,\n    WGPUTextureSampleType_Float = 0x00000001,\n    WGPUTextureSampleType_UnfilterableFloat = 0x00000002,\n    WGPUTextureSampleType_Depth = 0x00000003,\n    WGPUTextureSampleType_Sint = 0x00000004,\n    WGPUTextureSampleType_Uint = 0x00000005,\n    WGPUTextureSampleType_Force32 = 0x7FFFFFFF\n} WGPUTextureSampleType;\n\ntypedef enum WGPUTextureViewDimension {\n    WGPUTextureViewDimension_Undefined = 0x00000000,\n    WGPUTextureViewDimension_1D = 0x00000001,\n    WGPUTextureViewDimension_2D = 0x00000002,\n    WGPUTextureViewDimension_2DArray = 0x00000003,\n    WGPUTextureViewDimension_Cube = 0x00000004,\n    WGPUTextureViewDimension_CubeArray = 0x00000005,\n    WGPUTextureViewDimension_3D = 0x00000006,\n    WGPUTextureViewDimension_Force32 = 0x7FFFFFFF\n} WGPUTextureViewDimension;\n\ntypedef enum WGPUVertexFormat {\n    WGPUVertexFormat_Undefined = 0x00000000,\n    WGPUVertexFormat_Uint8x2 = 0x00000001,\n    WGPUVertexFormat_Uint8x4 = 0x00000002,\n    WGPUVertexFormat_Sint8x2 = 0x00000003,\n    WGPUVertexFormat_Sint8x4 = 0x00000004,\n    WGPUVertexFormat_Unorm8x2 = 0x00000005,\n    WGPUVertexFormat_Unorm8x4 = 0x00000006,\n    WGPUVertexFormat_Snorm8x2 = 0x00000007,\n    WGPUVertexFormat_Snorm8x4 = 0x00000008,\n    WGPUVertexFormat_Uint16x2 = 0x00000009,\n    WGPUVertexFormat_Uint16x4 = 0x0000000A,\n    WGPUVertexFormat_Sint16x2 = 0x0000000B,\n    WGPUVertexFormat_Sint16x4 = 0x0000000C,\n    WGPUVertexFormat_Unorm16x2 = 0x0000000D,\n    WGPUVertexFormat_Unorm16x4 = 0x0000000E,\n    WGPUVertexFormat_Snorm16x2 = 0x0000000F,\n    WGPUVertexFormat_Snorm16x4 = 0x00000010,\n    WGPUVertexFormat_Float16x2 = 0x00000011,\n    WGPUVertexFormat_Float16x4 = 0x00000012,\n    WGPUVertexFormat_Float32 = 0x00000013,\n    WGPUVertexFormat_Float32x2 = 0x00000014,\n    WGPUVertexFormat_Float32x3 = 0x00000015,\n    WGPUVertexFormat_Float32x4 = 0x00000016,\n    WGPUVertexFormat_Uint32 = 0x00000017,\n    WGPUVertexFormat_Uint32x2 = 0x00000018,\n    WGPUVertexFormat_Uint32x3 = 0x00000019,\n    WGPUVertexFormat_Uint32x4 = 0x0000001A,\n    WGPUVertexFormat_Sint32 = 0x0000001B,\n    WGPUVertexFormat_Sint32x2 = 0x0000001C,\n    WGPUVertexFormat_Sint32x3 = 0x0000001D,\n    WGPUVertexFormat_Sint32x4 = 0x0000001E,\n    WGPUVertexFormat_Force32 = 0x7FFFFFFF\n} WGPUVertexFormat;\n\ntypedef enum WGPUVertexStepMode {\n    WGPUVertexStepMode_Vertex = 0x00000000,\n    WGPUVertexStepMode_Instance = 0x00000001,\n    WGPUVertexStepMode_VertexBufferNotUsed = 0x00000002,\n    WGPUVertexStepMode_Force32 = 0x7FFFFFFF\n} WGPUVertexStepMode;\n\ntypedef enum WGPUBufferUsage {\n    WGPUBufferUsage_None = 0x00000000,\n    WGPUBufferUsage_MapRead = 0x00000001,\n    WGPUBufferUsage_MapWrite = 0x00000002,\n    WGPUBufferUsage_CopySrc = 0x00000004,\n    WGPUBufferUsage_CopyDst = 0x00000008,\n    WGPUBufferUsage_Index = 0x00000010,\n    WGPUBufferUsage_Vertex = 0x00000020,\n    WGPUBufferUsage_Uniform = 0x00000040,\n    WGPUBufferUsage_Storage = 0x00000080,\n    WGPUBufferUsage_Indirect = 0x00000100,\n    WGPUBufferUsage_QueryResolve = 0x00000200,\n    WGPUBufferUsage_Force32 = 0x7FFFFFFF\n} WGPUBufferUsage;\ntypedef WGPUFlags WGPUBufferUsageFlags;\n\ntypedef enum WGPUColorWriteMask {\n    WGPUColorWriteMask_None = 0x00000000,\n    WGPUColorWriteMask_Red = 0x00000001,\n    WGPUColorWriteMask_Green = 0x00000002,\n    WGPUColorWriteMask_Blue = 0x00000004,\n    WGPUColorWriteMask_Alpha = 0x00000008,\n    WGPUColorWriteMask_All = 0x0000000F,\n    WGPUColorWriteMask_Force32 = 0x7FFFFFFF\n} WGPUColorWriteMask;\ntypedef WGPUFlags WGPUColorWriteMaskFlags;\n\ntypedef enum WGPUMapMode {\n    WGPUMapMode_None = 0x00000000,\n    WGPUMapMode_Read = 0x00000001,\n    WGPUMapMode_Write = 0x00000002,\n    WGPUMapMode_Force32 = 0x7FFFFFFF\n} WGPUMapMode;\ntypedef WGPUFlags WGPUMapModeFlags;\n\ntypedef enum WGPUShaderStage {\n    WGPUShaderStage_None = 0x00000000,\n    WGPUShaderStage_Vertex = 0x00000001,\n    WGPUShaderStage_Fragment = 0x00000002,\n    WGPUShaderStage_Compute = 0x00000004,\n    WGPUShaderStage_Force32 = 0x7FFFFFFF\n} WGPUShaderStage;\ntypedef WGPUFlags WGPUShaderStageFlags;\n\ntypedef enum WGPUTextureUsage {\n    WGPUTextureUsage_None = 0x00000000,\n    WGPUTextureUsage_CopySrc = 0x00000001,\n    WGPUTextureUsage_CopyDst = 0x00000002,\n    WGPUTextureUsage_TextureBinding = 0x00000004,\n    WGPUTextureUsage_StorageBinding = 0x00000008,\n    WGPUTextureUsage_RenderAttachment = 0x00000010,\n    WGPUTextureUsage_Present = 0x00000020,\n    WGPUTextureUsage_Force32 = 0x7FFFFFFF\n} WGPUTextureUsage;\ntypedef WGPUFlags WGPUTextureUsageFlags;\n\ntypedef struct WGPUChainedStruct {\n    struct WGPUChainedStruct const * next;\n    WGPUSType sType;\n} WGPUChainedStruct;\n\ntypedef struct WGPUChainedStructOut {\n    struct WGPUChainedStructOut * next;\n    WGPUSType sType;\n} WGPUChainedStructOut;\n\ntypedef struct WGPUAdapterProperties {\n    WGPUChainedStructOut * nextInChain;\n    uint32_t vendorID;\n    char const * vendorName;\n    char const * architecture;\n    uint32_t deviceID;\n    char const * name;\n    char const * driverDescription;\n    WGPUAdapterType adapterType;\n    WGPUBackendType backendType;\n} WGPUAdapterProperties;\n\ntypedef struct WGPUBindGroupEntry {\n    WGPUChainedStruct const * nextInChain;\n    uint32_t binding;\n    WGPUBuffer buffer; // nullable\n    uint64_t offset;\n    uint64_t size;\n    WGPUSampler sampler; // nullable\n    WGPUTextureView textureView; // nullable\n} WGPUBindGroupEntry;\n\ntypedef struct WGPUBlendComponent {\n    WGPUBlendOperation operation;\n    WGPUBlendFactor srcFactor;\n    WGPUBlendFactor dstFactor;\n} WGPUBlendComponent;\n\ntypedef struct WGPUBufferBindingLayout {\n    WGPUChainedStruct const * nextInChain;\n    WGPUBufferBindingType type;\n    bool hasDynamicOffset;\n    uint64_t minBindingSize;\n} WGPUBufferBindingLayout;\n\ntypedef struct WGPUBufferDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n    WGPUBufferUsageFlags usage;\n    uint64_t size;\n    bool mappedAtCreation;\n} WGPUBufferDescriptor;\n\ntypedef struct WGPUColor {\n    double r;\n    double g;\n    double b;\n    double a;\n} WGPUColor;\n\ntypedef struct WGPUCommandBufferDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n} WGPUCommandBufferDescriptor;\n\ntypedef struct WGPUCommandEncoderDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n} WGPUCommandEncoderDescriptor;\n\ntypedef struct WGPUCompilationMessage {\n    WGPUChainedStruct const * nextInChain;\n    char const * message; // nullable\n    WGPUCompilationMessageType type;\n    uint64_t lineNum;\n    uint64_t linePos;\n    uint64_t offset;\n    uint64_t length;\n} WGPUCompilationMessage;\n\ntypedef struct WGPUComputePassTimestampWrite {\n    WGPUQuerySet querySet;\n    uint32_t queryIndex;\n    WGPUComputePassTimestampLocation location;\n} WGPUComputePassTimestampWrite;\n\ntypedef struct WGPUConstantEntry {\n    WGPUChainedStruct const * nextInChain;\n    char const * key;\n    double value;\n} WGPUConstantEntry;\n\ntypedef struct WGPUCopyTextureForBrowserOptions {\n    WGPUChainedStruct const * nextInChain;\n    bool flipY;\n    bool needsColorSpaceConversion;\n    WGPUAlphaMode srcAlphaMode;\n    float const * srcTransferFunctionParameters; // nullable\n    float const * conversionMatrix; // nullable\n    float const * dstTransferFunctionParameters; // nullable\n    WGPUAlphaMode dstAlphaMode;\n    bool internalUsage;\n} WGPUCopyTextureForBrowserOptions;\n\n// Can be chained in WGPUAdapterProperties\ntypedef struct WGPUDawnAdapterPropertiesPowerPreference {\n    WGPUChainedStructOut chain;\n    WGPUPowerPreference powerPreference;\n} WGPUDawnAdapterPropertiesPowerPreference;\n\n// Can be chained in WGPUDeviceDescriptor\ntypedef struct WGPUDawnCacheDeviceDescriptor {\n    WGPUChainedStruct chain;\n    char const * isolationKey;\n} WGPUDawnCacheDeviceDescriptor;\n\n// Can be chained in WGPUCommandEncoderDescriptor\ntypedef struct WGPUDawnEncoderInternalUsageDescriptor {\n    WGPUChainedStruct chain;\n    bool useInternalUsages;\n} WGPUDawnEncoderInternalUsageDescriptor;\n\n// Can be chained in WGPUInstanceDescriptor\ntypedef struct WGPUDawnInstanceDescriptor {\n    WGPUChainedStruct chain;\n    uint32_t additionalRuntimeSearchPathsCount;\n    const char* const * additionalRuntimeSearchPaths;\n} WGPUDawnInstanceDescriptor;\n\n// Can be chained in WGPUTextureDescriptor\ntypedef struct WGPUDawnTextureInternalUsageDescriptor {\n    WGPUChainedStruct chain;\n    WGPUTextureUsageFlags internalUsage;\n} WGPUDawnTextureInternalUsageDescriptor;\n\n// Can be chained in WGPUDeviceDescriptor\ntypedef struct WGPUDawnTogglesDeviceDescriptor {\n    WGPUChainedStruct chain;\n    uint32_t forceEnabledTogglesCount;\n    const char* const * forceEnabledToggles;\n    uint32_t forceDisabledTogglesCount;\n    const char* const * forceDisabledToggles;\n} WGPUDawnTogglesDeviceDescriptor;\n\ntypedef struct WGPUExtent2D {\n    uint32_t width;\n    uint32_t height;\n} WGPUExtent2D;\n\ntypedef struct WGPUExtent3D {\n    uint32_t width;\n    uint32_t height;\n    uint32_t depthOrArrayLayers;\n} WGPUExtent3D;\n\n// Can be chained in WGPUBindGroupEntry\ntypedef struct WGPUExternalTextureBindingEntry {\n    WGPUChainedStruct chain;\n    WGPUExternalTexture externalTexture;\n} WGPUExternalTextureBindingEntry;\n\n// Can be chained in WGPUBindGroupLayoutEntry\ntypedef struct WGPUExternalTextureBindingLayout {\n    WGPUChainedStruct chain;\n} WGPUExternalTextureBindingLayout;\n\ntypedef struct WGPUInstanceDescriptor {\n    WGPUChainedStruct const * nextInChain;\n} WGPUInstanceDescriptor;\n\ntypedef struct WGPULimits {\n    uint32_t maxTextureDimension1D;\n    uint32_t maxTextureDimension2D;\n    uint32_t maxTextureDimension3D;\n    uint32_t maxTextureArrayLayers;\n    uint32_t maxBindGroups;\n    uint32_t maxBindingsPerBindGroup;\n    uint32_t maxDynamicUniformBuffersPerPipelineLayout;\n    uint32_t maxDynamicStorageBuffersPerPipelineLayout;\n    uint32_t maxSampledTexturesPerShaderStage;\n    uint32_t maxSamplersPerShaderStage;\n    uint32_t maxStorageBuffersPerShaderStage;\n    uint32_t maxStorageTexturesPerShaderStage;\n    uint32_t maxUniformBuffersPerShaderStage;\n    uint64_t maxUniformBufferBindingSize;\n    uint64_t maxStorageBufferBindingSize;\n    uint32_t minUniformBufferOffsetAlignment;\n    uint32_t minStorageBufferOffsetAlignment;\n    uint32_t maxVertexBuffers;\n    uint64_t maxBufferSize;\n    uint32_t maxVertexAttributes;\n    uint32_t maxVertexBufferArrayStride;\n    uint32_t maxInterStageShaderComponents;\n    uint32_t maxInterStageShaderVariables;\n    uint32_t maxColorAttachments;\n    uint32_t maxComputeWorkgroupStorageSize;\n    uint32_t maxComputeInvocationsPerWorkgroup;\n    uint32_t maxComputeWorkgroupSizeX;\n    uint32_t maxComputeWorkgroupSizeY;\n    uint32_t maxComputeWorkgroupSizeZ;\n    uint32_t maxComputeWorkgroupsPerDimension;\n} WGPULimits;\n\ntypedef struct WGPUMultisampleState {\n    WGPUChainedStruct const * nextInChain;\n    uint32_t count;\n    uint32_t mask;\n    bool alphaToCoverageEnabled;\n} WGPUMultisampleState;\n\ntypedef struct WGPUOrigin2D {\n    uint32_t x;\n    uint32_t y;\n} WGPUOrigin2D;\n\ntypedef struct WGPUOrigin3D {\n    uint32_t x;\n    uint32_t y;\n    uint32_t z;\n} WGPUOrigin3D;\n\ntypedef struct WGPUPipelineLayoutDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n    uint32_t bindGroupLayoutCount;\n    WGPUBindGroupLayout const * bindGroupLayouts;\n} WGPUPipelineLayoutDescriptor;\n\n// Can be chained in WGPUPrimitiveState\ntypedef struct WGPUPrimitiveDepthClipControl {\n    WGPUChainedStruct chain;\n    bool unclippedDepth;\n} WGPUPrimitiveDepthClipControl;\n\ntypedef struct WGPUPrimitiveState {\n    WGPUChainedStruct const * nextInChain;\n    WGPUPrimitiveTopology topology;\n    WGPUIndexFormat stripIndexFormat;\n    WGPUFrontFace frontFace;\n    WGPUCullMode cullMode;\n} WGPUPrimitiveState;\n\ntypedef struct WGPUQuerySetDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n    WGPUQueryType type;\n    uint32_t count;\n    WGPUPipelineStatisticName const * pipelineStatistics;\n    uint32_t pipelineStatisticsCount;\n} WGPUQuerySetDescriptor;\n\ntypedef struct WGPUQueueDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n} WGPUQueueDescriptor;\n\ntypedef struct WGPURenderBundleDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n} WGPURenderBundleDescriptor;\n\ntypedef struct WGPURenderBundleEncoderDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n    uint32_t colorFormatsCount;\n    WGPUTextureFormat const * colorFormats;\n    WGPUTextureFormat depthStencilFormat;\n    uint32_t sampleCount;\n    bool depthReadOnly;\n    bool stencilReadOnly;\n} WGPURenderBundleEncoderDescriptor;\n\ntypedef struct WGPURenderPassDepthStencilAttachment {\n    WGPUTextureView view;\n    WGPULoadOp depthLoadOp;\n    WGPUStoreOp depthStoreOp;\n    float clearDepth;\n    float depthClearValue;\n    bool depthReadOnly;\n    WGPULoadOp stencilLoadOp;\n    WGPUStoreOp stencilStoreOp;\n    uint32_t clearStencil;\n    uint32_t stencilClearValue;\n    bool stencilReadOnly;\n} WGPURenderPassDepthStencilAttachment;\n\n// Can be chained in WGPURenderPassDescriptor\ntypedef struct WGPURenderPassDescriptorMaxDrawCount {\n    WGPUChainedStruct chain;\n    uint64_t maxDrawCount;\n} WGPURenderPassDescriptorMaxDrawCount;\n\ntypedef struct WGPURenderPassTimestampWrite {\n    WGPUQuerySet querySet;\n    uint32_t queryIndex;\n    WGPURenderPassTimestampLocation location;\n} WGPURenderPassTimestampWrite;\n\ntypedef struct WGPURequestAdapterOptions {\n    WGPUChainedStruct const * nextInChain;\n    WGPUSurface compatibleSurface; // nullable\n    WGPUPowerPreference powerPreference;\n    bool forceFallbackAdapter;\n} WGPURequestAdapterOptions;\n\ntypedef struct WGPUSamplerBindingLayout {\n    WGPUChainedStruct const * nextInChain;\n    WGPUSamplerBindingType type;\n} WGPUSamplerBindingLayout;\n\ntypedef struct WGPUSamplerDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n    WGPUAddressMode addressModeU;\n    WGPUAddressMode addressModeV;\n    WGPUAddressMode addressModeW;\n    WGPUFilterMode magFilter;\n    WGPUFilterMode minFilter;\n    WGPUFilterMode mipmapFilter;\n    float lodMinClamp;\n    float lodMaxClamp;\n    WGPUCompareFunction compare;\n    uint16_t maxAnisotropy;\n} WGPUSamplerDescriptor;\n\ntypedef struct WGPUShaderModuleDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n} WGPUShaderModuleDescriptor;\n\n// Can be chained in WGPUShaderModuleDescriptor\ntypedef struct WGPUShaderModuleSPIRVDescriptor {\n    WGPUChainedStruct chain;\n    uint32_t codeSize;\n    uint32_t const * code;\n} WGPUShaderModuleSPIRVDescriptor;\n\n// Can be chained in WGPUShaderModuleDescriptor\ntypedef struct WGPUShaderModuleWGSLDescriptor {\n    WGPUChainedStruct chain;\n    char const * source;\n} WGPUShaderModuleWGSLDescriptor;\n\ntypedef struct WGPUStencilFaceState {\n    WGPUCompareFunction compare;\n    WGPUStencilOperation failOp;\n    WGPUStencilOperation depthFailOp;\n    WGPUStencilOperation passOp;\n} WGPUStencilFaceState;\n\ntypedef struct WGPUStorageTextureBindingLayout {\n    WGPUChainedStruct const * nextInChain;\n    WGPUStorageTextureAccess access;\n    WGPUTextureFormat format;\n    WGPUTextureViewDimension viewDimension;\n} WGPUStorageTextureBindingLayout;\n\ntypedef struct WGPUSurfaceDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n} WGPUSurfaceDescriptor;\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceDescriptorFromAndroidNativeWindow {\n    WGPUChainedStruct chain;\n    void * window;\n} WGPUSurfaceDescriptorFromAndroidNativeWindow;\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceDescriptorFromCanvasHTMLSelector {\n    WGPUChainedStruct chain;\n    char const * selector;\n} WGPUSurfaceDescriptorFromCanvasHTMLSelector;\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceDescriptorFromMetalLayer {\n    WGPUChainedStruct chain;\n    void * layer;\n} WGPUSurfaceDescriptorFromMetalLayer;\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceDescriptorFromWaylandSurface {\n    WGPUChainedStruct chain;\n    void * display;\n    void * surface;\n} WGPUSurfaceDescriptorFromWaylandSurface;\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceDescriptorFromWindowsCoreWindow {\n    WGPUChainedStruct chain;\n    void * coreWindow;\n} WGPUSurfaceDescriptorFromWindowsCoreWindow;\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceDescriptorFromWindowsHWND {\n    WGPUChainedStruct chain;\n    void * hinstance;\n    void * hwnd;\n} WGPUSurfaceDescriptorFromWindowsHWND;\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceDescriptorFromWindowsSwapChainPanel {\n    WGPUChainedStruct chain;\n    void * swapChainPanel;\n} WGPUSurfaceDescriptorFromWindowsSwapChainPanel;\n\n// Can be chained in WGPUSurfaceDescriptor\ntypedef struct WGPUSurfaceDescriptorFromXlibWindow {\n    WGPUChainedStruct chain;\n    void * display;\n    uint32_t window;\n} WGPUSurfaceDescriptorFromXlibWindow;\n\ntypedef struct WGPUSwapChainDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n    WGPUTextureUsageFlags usage;\n    WGPUTextureFormat format;\n    uint32_t width;\n    uint32_t height;\n    WGPUPresentMode presentMode;\n    uint64_t implementation;\n} WGPUSwapChainDescriptor;\n\ntypedef struct WGPUTextureBindingLayout {\n    WGPUChainedStruct const * nextInChain;\n    WGPUTextureSampleType sampleType;\n    WGPUTextureViewDimension viewDimension;\n    bool multisampled;\n} WGPUTextureBindingLayout;\n\ntypedef struct WGPUTextureDataLayout {\n    WGPUChainedStruct const * nextInChain;\n    uint64_t offset;\n    uint32_t bytesPerRow;\n    uint32_t rowsPerImage;\n} WGPUTextureDataLayout;\n\ntypedef struct WGPUTextureViewDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n    WGPUTextureFormat format;\n    WGPUTextureViewDimension dimension;\n    uint32_t baseMipLevel;\n    uint32_t mipLevelCount;\n    uint32_t baseArrayLayer;\n    uint32_t arrayLayerCount;\n    WGPUTextureAspect aspect;\n} WGPUTextureViewDescriptor;\n\ntypedef struct WGPUVertexAttribute {\n    WGPUVertexFormat format;\n    uint64_t offset;\n    uint32_t shaderLocation;\n} WGPUVertexAttribute;\n\ntypedef struct WGPUBindGroupDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n    WGPUBindGroupLayout layout;\n    uint32_t entryCount;\n    WGPUBindGroupEntry const * entries;\n} WGPUBindGroupDescriptor;\n\ntypedef struct WGPUBindGroupLayoutEntry {\n    WGPUChainedStruct const * nextInChain;\n    uint32_t binding;\n    WGPUShaderStageFlags visibility;\n    WGPUBufferBindingLayout buffer;\n    WGPUSamplerBindingLayout sampler;\n    WGPUTextureBindingLayout texture;\n    WGPUStorageTextureBindingLayout storageTexture;\n} WGPUBindGroupLayoutEntry;\n\ntypedef struct WGPUBlendState {\n    WGPUBlendComponent color;\n    WGPUBlendComponent alpha;\n} WGPUBlendState;\n\ntypedef struct WGPUCompilationInfo {\n    WGPUChainedStruct const * nextInChain;\n    uint32_t messageCount;\n    WGPUCompilationMessage const * messages;\n} WGPUCompilationInfo;\n\ntypedef struct WGPUComputePassDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n    uint32_t timestampWriteCount;\n    WGPUComputePassTimestampWrite const * timestampWrites;\n} WGPUComputePassDescriptor;\n\ntypedef struct WGPUDepthStencilState {\n    WGPUChainedStruct const * nextInChain;\n    WGPUTextureFormat format;\n    bool depthWriteEnabled;\n    WGPUCompareFunction depthCompare;\n    WGPUStencilFaceState stencilFront;\n    WGPUStencilFaceState stencilBack;\n    uint32_t stencilReadMask;\n    uint32_t stencilWriteMask;\n    int32_t depthBias;\n    float depthBiasSlopeScale;\n    float depthBiasClamp;\n} WGPUDepthStencilState;\n\ntypedef struct WGPUExternalTextureDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n    WGPUTextureView plane0;\n    WGPUTextureView plane1; // nullable\n    WGPUOrigin2D visibleOrigin;\n    WGPUExtent2D visibleSize;\n    bool doYuvToRgbConversionOnly;\n    float const * yuvToRgbConversionMatrix; // nullable\n    float const * srcTransferFunctionParameters;\n    float const * dstTransferFunctionParameters;\n    float const * gamutConversionMatrix;\n} WGPUExternalTextureDescriptor;\n\ntypedef struct WGPUImageCopyBuffer {\n    WGPUChainedStruct const * nextInChain;\n    WGPUTextureDataLayout layout;\n    WGPUBuffer buffer;\n} WGPUImageCopyBuffer;\n\ntypedef struct WGPUImageCopyExternalTexture {\n    WGPUChainedStruct const * nextInChain;\n    WGPUExternalTexture externalTexture;\n    WGPUOrigin3D origin;\n} WGPUImageCopyExternalTexture;\n\ntypedef struct WGPUImageCopyTexture {\n    WGPUChainedStruct const * nextInChain;\n    WGPUTexture texture;\n    uint32_t mipLevel;\n    WGPUOrigin3D origin;\n    WGPUTextureAspect aspect;\n} WGPUImageCopyTexture;\n\ntypedef struct WGPUProgrammableStageDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUShaderModule module;\n    char const * entryPoint;\n    uint32_t constantCount;\n    WGPUConstantEntry const * constants;\n} WGPUProgrammableStageDescriptor;\n\ntypedef struct WGPURenderPassColorAttachment {\n    WGPUTextureView view; // nullable\n    WGPUTextureView resolveTarget; // nullable\n    WGPULoadOp loadOp;\n    WGPUStoreOp storeOp;\n    WGPUColor clearColor;\n    WGPUColor clearValue;\n} WGPURenderPassColorAttachment;\n\ntypedef struct WGPURequiredLimits {\n    WGPUChainedStruct const * nextInChain;\n    WGPULimits limits;\n} WGPURequiredLimits;\n\ntypedef struct WGPUSupportedLimits {\n    WGPUChainedStructOut * nextInChain;\n    WGPULimits limits;\n} WGPUSupportedLimits;\n\ntypedef struct WGPUTextureDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n    WGPUTextureUsageFlags usage;\n    WGPUTextureDimension dimension;\n    WGPUExtent3D size;\n    WGPUTextureFormat format;\n    uint32_t mipLevelCount;\n    uint32_t sampleCount;\n    uint32_t viewFormatCount;\n    WGPUTextureFormat const * viewFormats;\n} WGPUTextureDescriptor;\n\ntypedef struct WGPUVertexBufferLayout {\n    uint64_t arrayStride;\n    WGPUVertexStepMode stepMode;\n    uint32_t attributeCount;\n    WGPUVertexAttribute const * attributes;\n} WGPUVertexBufferLayout;\n\ntypedef struct WGPUBindGroupLayoutDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n    uint32_t entryCount;\n    WGPUBindGroupLayoutEntry const * entries;\n} WGPUBindGroupLayoutDescriptor;\n\ntypedef struct WGPUColorTargetState {\n    WGPUChainedStruct const * nextInChain;\n    WGPUTextureFormat format;\n    WGPUBlendState const * blend; // nullable\n    WGPUColorWriteMaskFlags writeMask;\n} WGPUColorTargetState;\n\ntypedef struct WGPUComputePipelineDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n    WGPUPipelineLayout layout; // nullable\n    WGPUProgrammableStageDescriptor compute;\n} WGPUComputePipelineDescriptor;\n\ntypedef struct WGPUDeviceDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n    uint32_t requiredFeaturesCount;\n    WGPUFeatureName const * requiredFeatures;\n    WGPURequiredLimits const * requiredLimits; // nullable\n    WGPUQueueDescriptor defaultQueue;\n} WGPUDeviceDescriptor;\n\ntypedef struct WGPURenderPassDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n    uint32_t colorAttachmentCount;\n    WGPURenderPassColorAttachment const * colorAttachments;\n    WGPURenderPassDepthStencilAttachment const * depthStencilAttachment; // nullable\n    WGPUQuerySet occlusionQuerySet; // nullable\n    uint32_t timestampWriteCount;\n    WGPURenderPassTimestampWrite const * timestampWrites;\n} WGPURenderPassDescriptor;\n\ntypedef struct WGPUVertexState {\n    WGPUChainedStruct const * nextInChain;\n    WGPUShaderModule module;\n    char const * entryPoint;\n    uint32_t constantCount;\n    WGPUConstantEntry const * constants;\n    uint32_t bufferCount;\n    WGPUVertexBufferLayout const * buffers;\n} WGPUVertexState;\n\ntypedef struct WGPUFragmentState {\n    WGPUChainedStruct const * nextInChain;\n    WGPUShaderModule module;\n    char const * entryPoint;\n    uint32_t constantCount;\n    WGPUConstantEntry const * constants;\n    uint32_t targetCount;\n    WGPUColorTargetState const * targets;\n} WGPUFragmentState;\n\ntypedef struct WGPURenderPipelineDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label; // nullable\n    WGPUPipelineLayout layout; // nullable\n    WGPUVertexState vertex;\n    WGPUPrimitiveState primitive;\n    WGPUDepthStencilState const * depthStencil; // nullable\n    WGPUMultisampleState multisample;\n    WGPUFragmentState const * fragment; // nullable\n} WGPURenderPipelineDescriptor;\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\ntypedef void (*WGPUBufferMapCallback)(WGPUBufferMapAsyncStatus status, void * userdata);\ntypedef void (*WGPUCompilationInfoCallback)(WGPUCompilationInfoRequestStatus status, WGPUCompilationInfo const * compilationInfo, void * userdata);\ntypedef void (*WGPUCreateComputePipelineAsyncCallback)(WGPUCreatePipelineAsyncStatus status, WGPUComputePipeline pipeline, char const * message, void * userdata);\ntypedef void (*WGPUCreateRenderPipelineAsyncCallback)(WGPUCreatePipelineAsyncStatus status, WGPURenderPipeline pipeline, char const * message, void * userdata);\ntypedef void (*WGPUDeviceLostCallback)(WGPUDeviceLostReason reason, char const * message, void * userdata);\ntypedef void (*WGPUErrorCallback)(WGPUErrorType type, char const * message, void * userdata);\ntypedef void (*WGPULoggingCallback)(WGPULoggingType type, char const * message, void * userdata);\ntypedef void (*WGPUProc)(void);\ntypedef void (*WGPUQueueWorkDoneCallback)(WGPUQueueWorkDoneStatus status, void * userdata);\ntypedef void (*WGPURequestAdapterCallback)(WGPURequestAdapterStatus status, WGPUAdapter adapter, char const * message, void * userdata);\ntypedef void (*WGPURequestDeviceCallback)(WGPURequestDeviceStatus status, WGPUDevice device, char const * message, void * userdata);\n\n#if !defined(WGPU_SKIP_PROCS)\n\ntypedef WGPUInstance (*WGPUProcCreateInstance)(WGPUInstanceDescriptor const * descriptor);\ntypedef WGPUProc (*WGPUProcGetProcAddress)(WGPUDevice device, char const * procName);\n\n// Procs of Adapter\ntypedef WGPUDevice (*WGPUProcAdapterCreateDevice)(WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor /* nullable */);\ntypedef size_t (*WGPUProcAdapterEnumerateFeatures)(WGPUAdapter adapter, WGPUFeatureName * features);\ntypedef bool (*WGPUProcAdapterGetLimits)(WGPUAdapter adapter, WGPUSupportedLimits * limits);\ntypedef void (*WGPUProcAdapterGetProperties)(WGPUAdapter adapter, WGPUAdapterProperties * properties);\ntypedef bool (*WGPUProcAdapterHasFeature)(WGPUAdapter adapter, WGPUFeatureName feature);\ntypedef void (*WGPUProcAdapterRequestDevice)(WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor /* nullable */, WGPURequestDeviceCallback callback, void * userdata);\ntypedef void (*WGPUProcAdapterReference)(WGPUAdapter adapter);\ntypedef void (*WGPUProcAdapterRelease)(WGPUAdapter adapter);\n\n// Procs of BindGroup\ntypedef void (*WGPUProcBindGroupSetLabel)(WGPUBindGroup bindGroup, char const * label);\ntypedef void (*WGPUProcBindGroupReference)(WGPUBindGroup bindGroup);\ntypedef void (*WGPUProcBindGroupRelease)(WGPUBindGroup bindGroup);\n\n// Procs of BindGroupLayout\ntypedef void (*WGPUProcBindGroupLayoutSetLabel)(WGPUBindGroupLayout bindGroupLayout, char const * label);\ntypedef void (*WGPUProcBindGroupLayoutReference)(WGPUBindGroupLayout bindGroupLayout);\ntypedef void (*WGPUProcBindGroupLayoutRelease)(WGPUBindGroupLayout bindGroupLayout);\n\n// Procs of Buffer\ntypedef void (*WGPUProcBufferDestroy)(WGPUBuffer buffer);\ntypedef void const * (*WGPUProcBufferGetConstMappedRange)(WGPUBuffer buffer, size_t offset, size_t size);\ntypedef void * (*WGPUProcBufferGetMappedRange)(WGPUBuffer buffer, size_t offset, size_t size);\ntypedef uint64_t (*WGPUProcBufferGetSize)(WGPUBuffer buffer);\ntypedef WGPUBufferUsage (*WGPUProcBufferGetUsage)(WGPUBuffer buffer);\ntypedef void (*WGPUProcBufferMapAsync)(WGPUBuffer buffer, WGPUMapModeFlags mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata);\ntypedef void (*WGPUProcBufferSetLabel)(WGPUBuffer buffer, char const * label);\ntypedef void (*WGPUProcBufferUnmap)(WGPUBuffer buffer);\ntypedef void (*WGPUProcBufferReference)(WGPUBuffer buffer);\ntypedef void (*WGPUProcBufferRelease)(WGPUBuffer buffer);\n\n// Procs of CommandBuffer\ntypedef void (*WGPUProcCommandBufferSetLabel)(WGPUCommandBuffer commandBuffer, char const * label);\ntypedef void (*WGPUProcCommandBufferReference)(WGPUCommandBuffer commandBuffer);\ntypedef void (*WGPUProcCommandBufferRelease)(WGPUCommandBuffer commandBuffer);\n\n// Procs of CommandEncoder\ntypedef WGPUComputePassEncoder (*WGPUProcCommandEncoderBeginComputePass)(WGPUCommandEncoder commandEncoder, WGPUComputePassDescriptor const * descriptor /* nullable */);\ntypedef WGPURenderPassEncoder (*WGPUProcCommandEncoderBeginRenderPass)(WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor const * descriptor);\ntypedef void (*WGPUProcCommandEncoderClearBuffer)(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size);\ntypedef void (*WGPUProcCommandEncoderCopyBufferToBuffer)(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size);\ntypedef void (*WGPUProcCommandEncoderCopyBufferToTexture)(WGPUCommandEncoder commandEncoder, WGPUImageCopyBuffer const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize);\ntypedef void (*WGPUProcCommandEncoderCopyTextureToBuffer)(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyBuffer const * destination, WGPUExtent3D const * copySize);\ntypedef void (*WGPUProcCommandEncoderCopyTextureToTexture)(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize);\ntypedef void (*WGPUProcCommandEncoderCopyTextureToTextureInternal)(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize);\ntypedef WGPUCommandBuffer (*WGPUProcCommandEncoderFinish)(WGPUCommandEncoder commandEncoder, WGPUCommandBufferDescriptor const * descriptor /* nullable */);\ntypedef void (*WGPUProcCommandEncoderInjectValidationError)(WGPUCommandEncoder commandEncoder, char const * message);\ntypedef void (*WGPUProcCommandEncoderInsertDebugMarker)(WGPUCommandEncoder commandEncoder, char const * markerLabel);\ntypedef void (*WGPUProcCommandEncoderPopDebugGroup)(WGPUCommandEncoder commandEncoder);\ntypedef void (*WGPUProcCommandEncoderPushDebugGroup)(WGPUCommandEncoder commandEncoder, char const * groupLabel);\ntypedef void (*WGPUProcCommandEncoderResolveQuerySet)(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset);\ntypedef void (*WGPUProcCommandEncoderSetLabel)(WGPUCommandEncoder commandEncoder, char const * label);\ntypedef void (*WGPUProcCommandEncoderWriteBuffer)(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size);\ntypedef void (*WGPUProcCommandEncoderWriteTimestamp)(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex);\ntypedef void (*WGPUProcCommandEncoderReference)(WGPUCommandEncoder commandEncoder);\ntypedef void (*WGPUProcCommandEncoderRelease)(WGPUCommandEncoder commandEncoder);\n\n// Procs of ComputePassEncoder\ntypedef void (*WGPUProcComputePassEncoderDispatch)(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ);\ntypedef void (*WGPUProcComputePassEncoderDispatchIndirect)(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\ntypedef void (*WGPUProcComputePassEncoderDispatchWorkgroups)(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ);\ntypedef void (*WGPUProcComputePassEncoderDispatchWorkgroupsIndirect)(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\ntypedef void (*WGPUProcComputePassEncoderEnd)(WGPUComputePassEncoder computePassEncoder);\ntypedef void (*WGPUProcComputePassEncoderEndPass)(WGPUComputePassEncoder computePassEncoder);\ntypedef void (*WGPUProcComputePassEncoderInsertDebugMarker)(WGPUComputePassEncoder computePassEncoder, char const * markerLabel);\ntypedef void (*WGPUProcComputePassEncoderPopDebugGroup)(WGPUComputePassEncoder computePassEncoder);\ntypedef void (*WGPUProcComputePassEncoderPushDebugGroup)(WGPUComputePassEncoder computePassEncoder, char const * groupLabel);\ntypedef void (*WGPUProcComputePassEncoderSetBindGroup)(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, uint32_t dynamicOffsetCount, uint32_t const * dynamicOffsets);\ntypedef void (*WGPUProcComputePassEncoderSetLabel)(WGPUComputePassEncoder computePassEncoder, char const * label);\ntypedef void (*WGPUProcComputePassEncoderSetPipeline)(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline);\ntypedef void (*WGPUProcComputePassEncoderWriteTimestamp)(WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint32_t queryIndex);\ntypedef void (*WGPUProcComputePassEncoderReference)(WGPUComputePassEncoder computePassEncoder);\ntypedef void (*WGPUProcComputePassEncoderRelease)(WGPUComputePassEncoder computePassEncoder);\n\n// Procs of ComputePipeline\ntypedef WGPUBindGroupLayout (*WGPUProcComputePipelineGetBindGroupLayout)(WGPUComputePipeline computePipeline, uint32_t groupIndex);\ntypedef void (*WGPUProcComputePipelineSetLabel)(WGPUComputePipeline computePipeline, char const * label);\ntypedef void (*WGPUProcComputePipelineReference)(WGPUComputePipeline computePipeline);\ntypedef void (*WGPUProcComputePipelineRelease)(WGPUComputePipeline computePipeline);\n\n// Procs of Device\ntypedef WGPUBindGroup (*WGPUProcDeviceCreateBindGroup)(WGPUDevice device, WGPUBindGroupDescriptor const * descriptor);\ntypedef WGPUBindGroupLayout (*WGPUProcDeviceCreateBindGroupLayout)(WGPUDevice device, WGPUBindGroupLayoutDescriptor const * descriptor);\ntypedef WGPUBuffer (*WGPUProcDeviceCreateBuffer)(WGPUDevice device, WGPUBufferDescriptor const * descriptor);\ntypedef WGPUCommandEncoder (*WGPUProcDeviceCreateCommandEncoder)(WGPUDevice device, WGPUCommandEncoderDescriptor const * descriptor /* nullable */);\ntypedef WGPUComputePipeline (*WGPUProcDeviceCreateComputePipeline)(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor);\ntypedef void (*WGPUProcDeviceCreateComputePipelineAsync)(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata);\ntypedef WGPUBuffer (*WGPUProcDeviceCreateErrorBuffer)(WGPUDevice device);\ntypedef WGPUExternalTexture (*WGPUProcDeviceCreateErrorExternalTexture)(WGPUDevice device);\ntypedef WGPUTexture (*WGPUProcDeviceCreateErrorTexture)(WGPUDevice device, WGPUTextureDescriptor const * descriptor);\ntypedef WGPUExternalTexture (*WGPUProcDeviceCreateExternalTexture)(WGPUDevice device, WGPUExternalTextureDescriptor const * externalTextureDescriptor);\ntypedef WGPUPipelineLayout (*WGPUProcDeviceCreatePipelineLayout)(WGPUDevice device, WGPUPipelineLayoutDescriptor const * descriptor);\ntypedef WGPUQuerySet (*WGPUProcDeviceCreateQuerySet)(WGPUDevice device, WGPUQuerySetDescriptor const * descriptor);\ntypedef WGPURenderBundleEncoder (*WGPUProcDeviceCreateRenderBundleEncoder)(WGPUDevice device, WGPURenderBundleEncoderDescriptor const * descriptor);\ntypedef WGPURenderPipeline (*WGPUProcDeviceCreateRenderPipeline)(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor);\ntypedef void (*WGPUProcDeviceCreateRenderPipelineAsync)(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata);\ntypedef WGPUSampler (*WGPUProcDeviceCreateSampler)(WGPUDevice device, WGPUSamplerDescriptor const * descriptor /* nullable */);\ntypedef WGPUShaderModule (*WGPUProcDeviceCreateShaderModule)(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor);\ntypedef WGPUSwapChain (*WGPUProcDeviceCreateSwapChain)(WGPUDevice device, WGPUSurface surface /* nullable */, WGPUSwapChainDescriptor const * descriptor);\ntypedef WGPUTexture (*WGPUProcDeviceCreateTexture)(WGPUDevice device, WGPUTextureDescriptor const * descriptor);\ntypedef void (*WGPUProcDeviceDestroy)(WGPUDevice device);\ntypedef size_t (*WGPUProcDeviceEnumerateFeatures)(WGPUDevice device, WGPUFeatureName * features);\ntypedef void (*WGPUProcDeviceForceLoss)(WGPUDevice device, WGPUDeviceLostReason type, char const * message);\ntypedef WGPUAdapter (*WGPUProcDeviceGetAdapter)(WGPUDevice device);\ntypedef bool (*WGPUProcDeviceGetLimits)(WGPUDevice device, WGPUSupportedLimits * limits);\ntypedef WGPUQueue (*WGPUProcDeviceGetQueue)(WGPUDevice device);\ntypedef bool (*WGPUProcDeviceHasFeature)(WGPUDevice device, WGPUFeatureName feature);\ntypedef void (*WGPUProcDeviceInjectError)(WGPUDevice device, WGPUErrorType type, char const * message);\ntypedef bool (*WGPUProcDevicePopErrorScope)(WGPUDevice device, WGPUErrorCallback callback, void * userdata);\ntypedef void (*WGPUProcDevicePushErrorScope)(WGPUDevice device, WGPUErrorFilter filter);\ntypedef void (*WGPUProcDeviceSetDeviceLostCallback)(WGPUDevice device, WGPUDeviceLostCallback callback, void * userdata);\ntypedef void (*WGPUProcDeviceSetLabel)(WGPUDevice device, char const * label);\ntypedef void (*WGPUProcDeviceSetLoggingCallback)(WGPUDevice device, WGPULoggingCallback callback, void * userdata);\ntypedef void (*WGPUProcDeviceSetUncapturedErrorCallback)(WGPUDevice device, WGPUErrorCallback callback, void * userdata);\ntypedef void (*WGPUProcDeviceTick)(WGPUDevice device);\ntypedef void (*WGPUProcDeviceReference)(WGPUDevice device);\ntypedef void (*WGPUProcDeviceRelease)(WGPUDevice device);\n\n// Procs of ExternalTexture\ntypedef void (*WGPUProcExternalTextureDestroy)(WGPUExternalTexture externalTexture);\ntypedef void (*WGPUProcExternalTextureSetLabel)(WGPUExternalTexture externalTexture, char const * label);\ntypedef void (*WGPUProcExternalTextureReference)(WGPUExternalTexture externalTexture);\ntypedef void (*WGPUProcExternalTextureRelease)(WGPUExternalTexture externalTexture);\n\n// Procs of Instance\ntypedef WGPUSurface (*WGPUProcInstanceCreateSurface)(WGPUInstance instance, WGPUSurfaceDescriptor const * descriptor);\ntypedef void (*WGPUProcInstanceRequestAdapter)(WGPUInstance instance, WGPURequestAdapterOptions const * options /* nullable */, WGPURequestAdapterCallback callback, void * userdata);\ntypedef void (*WGPUProcInstanceReference)(WGPUInstance instance);\ntypedef void (*WGPUProcInstanceRelease)(WGPUInstance instance);\n\n// Procs of PipelineLayout\ntypedef void (*WGPUProcPipelineLayoutSetLabel)(WGPUPipelineLayout pipelineLayout, char const * label);\ntypedef void (*WGPUProcPipelineLayoutReference)(WGPUPipelineLayout pipelineLayout);\ntypedef void (*WGPUProcPipelineLayoutRelease)(WGPUPipelineLayout pipelineLayout);\n\n// Procs of QuerySet\ntypedef void (*WGPUProcQuerySetDestroy)(WGPUQuerySet querySet);\ntypedef uint32_t (*WGPUProcQuerySetGetCount)(WGPUQuerySet querySet);\ntypedef WGPUQueryType (*WGPUProcQuerySetGetType)(WGPUQuerySet querySet);\ntypedef void (*WGPUProcQuerySetSetLabel)(WGPUQuerySet querySet, char const * label);\ntypedef void (*WGPUProcQuerySetReference)(WGPUQuerySet querySet);\ntypedef void (*WGPUProcQuerySetRelease)(WGPUQuerySet querySet);\n\n// Procs of Queue\ntypedef void (*WGPUProcQueueCopyExternalTextureForBrowser)(WGPUQueue queue, WGPUImageCopyExternalTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options);\ntypedef void (*WGPUProcQueueCopyTextureForBrowser)(WGPUQueue queue, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options);\ntypedef void (*WGPUProcQueueOnSubmittedWorkDone)(WGPUQueue queue, uint64_t signalValue, WGPUQueueWorkDoneCallback callback, void * userdata);\ntypedef void (*WGPUProcQueueSetLabel)(WGPUQueue queue, char const * label);\ntypedef void (*WGPUProcQueueSubmit)(WGPUQueue queue, uint32_t commandCount, WGPUCommandBuffer const * commands);\ntypedef void (*WGPUProcQueueWriteBuffer)(WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, void const * data, size_t size);\ntypedef void (*WGPUProcQueueWriteTexture)(WGPUQueue queue, WGPUImageCopyTexture const * destination, void const * data, size_t dataSize, WGPUTextureDataLayout const * dataLayout, WGPUExtent3D const * writeSize);\ntypedef void (*WGPUProcQueueReference)(WGPUQueue queue);\ntypedef void (*WGPUProcQueueRelease)(WGPUQueue queue);\n\n// Procs of RenderBundle\ntypedef void (*WGPUProcRenderBundleReference)(WGPURenderBundle renderBundle);\ntypedef void (*WGPUProcRenderBundleRelease)(WGPURenderBundle renderBundle);\n\n// Procs of RenderBundleEncoder\ntypedef void (*WGPUProcRenderBundleEncoderDraw)(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);\ntypedef void (*WGPUProcRenderBundleEncoderDrawIndexed)(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance);\ntypedef void (*WGPUProcRenderBundleEncoderDrawIndexedIndirect)(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\ntypedef void (*WGPUProcRenderBundleEncoderDrawIndirect)(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\ntypedef WGPURenderBundle (*WGPUProcRenderBundleEncoderFinish)(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderBundleDescriptor const * descriptor /* nullable */);\ntypedef void (*WGPUProcRenderBundleEncoderInsertDebugMarker)(WGPURenderBundleEncoder renderBundleEncoder, char const * markerLabel);\ntypedef void (*WGPUProcRenderBundleEncoderPopDebugGroup)(WGPURenderBundleEncoder renderBundleEncoder);\ntypedef void (*WGPUProcRenderBundleEncoderPushDebugGroup)(WGPURenderBundleEncoder renderBundleEncoder, char const * groupLabel);\ntypedef void (*WGPUProcRenderBundleEncoderSetBindGroup)(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPUBindGroup group, uint32_t dynamicOffsetCount, uint32_t const * dynamicOffsets);\ntypedef void (*WGPUProcRenderBundleEncoderSetIndexBuffer)(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size);\ntypedef void (*WGPUProcRenderBundleEncoderSetLabel)(WGPURenderBundleEncoder renderBundleEncoder, char const * label);\ntypedef void (*WGPUProcRenderBundleEncoderSetPipeline)(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline);\ntypedef void (*WGPUProcRenderBundleEncoderSetVertexBuffer)(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size);\ntypedef void (*WGPUProcRenderBundleEncoderReference)(WGPURenderBundleEncoder renderBundleEncoder);\ntypedef void (*WGPUProcRenderBundleEncoderRelease)(WGPURenderBundleEncoder renderBundleEncoder);\n\n// Procs of RenderPassEncoder\ntypedef void (*WGPUProcRenderPassEncoderBeginOcclusionQuery)(WGPURenderPassEncoder renderPassEncoder, uint32_t queryIndex);\ntypedef void (*WGPUProcRenderPassEncoderDraw)(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);\ntypedef void (*WGPUProcRenderPassEncoderDrawIndexed)(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance);\ntypedef void (*WGPUProcRenderPassEncoderDrawIndexedIndirect)(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\ntypedef void (*WGPUProcRenderPassEncoderDrawIndirect)(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\ntypedef void (*WGPUProcRenderPassEncoderEnd)(WGPURenderPassEncoder renderPassEncoder);\ntypedef void (*WGPUProcRenderPassEncoderEndOcclusionQuery)(WGPURenderPassEncoder renderPassEncoder);\ntypedef void (*WGPUProcRenderPassEncoderEndPass)(WGPURenderPassEncoder renderPassEncoder);\ntypedef void (*WGPUProcRenderPassEncoderExecuteBundles)(WGPURenderPassEncoder renderPassEncoder, uint32_t bundleCount, WGPURenderBundle const * bundles);\ntypedef void (*WGPUProcRenderPassEncoderInsertDebugMarker)(WGPURenderPassEncoder renderPassEncoder, char const * markerLabel);\ntypedef void (*WGPUProcRenderPassEncoderPopDebugGroup)(WGPURenderPassEncoder renderPassEncoder);\ntypedef void (*WGPUProcRenderPassEncoderPushDebugGroup)(WGPURenderPassEncoder renderPassEncoder, char const * groupLabel);\ntypedef void (*WGPUProcRenderPassEncoderSetBindGroup)(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPUBindGroup group, uint32_t dynamicOffsetCount, uint32_t const * dynamicOffsets);\ntypedef void (*WGPUProcRenderPassEncoderSetBlendConstant)(WGPURenderPassEncoder renderPassEncoder, WGPUColor const * color);\ntypedef void (*WGPUProcRenderPassEncoderSetIndexBuffer)(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size);\ntypedef void (*WGPUProcRenderPassEncoderSetLabel)(WGPURenderPassEncoder renderPassEncoder, char const * label);\ntypedef void (*WGPUProcRenderPassEncoderSetPipeline)(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline);\ntypedef void (*WGPUProcRenderPassEncoderSetScissorRect)(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height);\ntypedef void (*WGPUProcRenderPassEncoderSetStencilReference)(WGPURenderPassEncoder renderPassEncoder, uint32_t reference);\ntypedef void (*WGPUProcRenderPassEncoderSetVertexBuffer)(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size);\ntypedef void (*WGPUProcRenderPassEncoderSetViewport)(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);\ntypedef void (*WGPUProcRenderPassEncoderWriteTimestamp)(WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint32_t queryIndex);\ntypedef void (*WGPUProcRenderPassEncoderReference)(WGPURenderPassEncoder renderPassEncoder);\ntypedef void (*WGPUProcRenderPassEncoderRelease)(WGPURenderPassEncoder renderPassEncoder);\n\n// Procs of RenderPipeline\ntypedef WGPUBindGroupLayout (*WGPUProcRenderPipelineGetBindGroupLayout)(WGPURenderPipeline renderPipeline, uint32_t groupIndex);\ntypedef void (*WGPUProcRenderPipelineSetLabel)(WGPURenderPipeline renderPipeline, char const * label);\ntypedef void (*WGPUProcRenderPipelineReference)(WGPURenderPipeline renderPipeline);\ntypedef void (*WGPUProcRenderPipelineRelease)(WGPURenderPipeline renderPipeline);\n\n// Procs of Sampler\ntypedef void (*WGPUProcSamplerSetLabel)(WGPUSampler sampler, char const * label);\ntypedef void (*WGPUProcSamplerReference)(WGPUSampler sampler);\ntypedef void (*WGPUProcSamplerRelease)(WGPUSampler sampler);\n\n// Procs of ShaderModule\ntypedef void (*WGPUProcShaderModuleGetCompilationInfo)(WGPUShaderModule shaderModule, WGPUCompilationInfoCallback callback, void * userdata);\ntypedef void (*WGPUProcShaderModuleSetLabel)(WGPUShaderModule shaderModule, char const * label);\ntypedef void (*WGPUProcShaderModuleReference)(WGPUShaderModule shaderModule);\ntypedef void (*WGPUProcShaderModuleRelease)(WGPUShaderModule shaderModule);\n\n// Procs of Surface\ntypedef void (*WGPUProcSurfaceReference)(WGPUSurface surface);\ntypedef void (*WGPUProcSurfaceRelease)(WGPUSurface surface);\n\n// Procs of SwapChain\ntypedef void (*WGPUProcSwapChainConfigure)(WGPUSwapChain swapChain, WGPUTextureFormat format, WGPUTextureUsageFlags allowedUsage, uint32_t width, uint32_t height);\ntypedef WGPUTextureView (*WGPUProcSwapChainGetCurrentTextureView)(WGPUSwapChain swapChain);\ntypedef void (*WGPUProcSwapChainPresent)(WGPUSwapChain swapChain);\ntypedef void (*WGPUProcSwapChainReference)(WGPUSwapChain swapChain);\ntypedef void (*WGPUProcSwapChainRelease)(WGPUSwapChain swapChain);\n\n// Procs of Texture\ntypedef WGPUTextureView (*WGPUProcTextureCreateView)(WGPUTexture texture, WGPUTextureViewDescriptor const * descriptor /* nullable */);\ntypedef void (*WGPUProcTextureDestroy)(WGPUTexture texture);\ntypedef uint32_t (*WGPUProcTextureGetDepthOrArrayLayers)(WGPUTexture texture);\ntypedef WGPUTextureDimension (*WGPUProcTextureGetDimension)(WGPUTexture texture);\ntypedef WGPUTextureFormat (*WGPUProcTextureGetFormat)(WGPUTexture texture);\ntypedef uint32_t (*WGPUProcTextureGetHeight)(WGPUTexture texture);\ntypedef uint32_t (*WGPUProcTextureGetMipLevelCount)(WGPUTexture texture);\ntypedef uint32_t (*WGPUProcTextureGetSampleCount)(WGPUTexture texture);\ntypedef WGPUTextureUsage (*WGPUProcTextureGetUsage)(WGPUTexture texture);\ntypedef uint32_t (*WGPUProcTextureGetWidth)(WGPUTexture texture);\ntypedef void (*WGPUProcTextureSetLabel)(WGPUTexture texture, char const * label);\ntypedef void (*WGPUProcTextureReference)(WGPUTexture texture);\ntypedef void (*WGPUProcTextureRelease)(WGPUTexture texture);\n\n// Procs of TextureView\ntypedef void (*WGPUProcTextureViewSetLabel)(WGPUTextureView textureView, char const * label);\ntypedef void (*WGPUProcTextureViewReference)(WGPUTextureView textureView);\ntypedef void (*WGPUProcTextureViewRelease)(WGPUTextureView textureView);\n\n#endif  // !defined(WGPU_SKIP_PROCS)\n\n#if !defined(WGPU_SKIP_DECLARATIONS)\n\nWGPU_EXPORT WGPUInstance wgpuCreateInstance(WGPUInstanceDescriptor const * descriptor);\nWGPU_EXPORT WGPUProc wgpuGetProcAddress(WGPUDevice device, char const * procName);\n\n// Methods of Adapter\nWGPU_EXPORT WGPUDevice wgpuAdapterCreateDevice(WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor /* nullable */);\nWGPU_EXPORT size_t wgpuAdapterEnumerateFeatures(WGPUAdapter adapter, WGPUFeatureName * features);\nWGPU_EXPORT bool wgpuAdapterGetLimits(WGPUAdapter adapter, WGPUSupportedLimits * limits);\nWGPU_EXPORT void wgpuAdapterGetProperties(WGPUAdapter adapter, WGPUAdapterProperties * properties);\nWGPU_EXPORT bool wgpuAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature);\nWGPU_EXPORT void wgpuAdapterRequestDevice(WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor /* nullable */, WGPURequestDeviceCallback callback, void * userdata);\nWGPU_EXPORT void wgpuAdapterReference(WGPUAdapter adapter);\nWGPU_EXPORT void wgpuAdapterRelease(WGPUAdapter adapter);\n\n// Methods of BindGroup\nWGPU_EXPORT void wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, char const * label);\nWGPU_EXPORT void wgpuBindGroupReference(WGPUBindGroup bindGroup);\nWGPU_EXPORT void wgpuBindGroupRelease(WGPUBindGroup bindGroup);\n\n// Methods of BindGroupLayout\nWGPU_EXPORT void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, char const * label);\nWGPU_EXPORT void wgpuBindGroupLayoutReference(WGPUBindGroupLayout bindGroupLayout);\nWGPU_EXPORT void wgpuBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout);\n\n// Methods of Buffer\nWGPU_EXPORT void wgpuBufferDestroy(WGPUBuffer buffer);\nWGPU_EXPORT void const * wgpuBufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size);\nWGPU_EXPORT void * wgpuBufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size);\nWGPU_EXPORT uint64_t wgpuBufferGetSize(WGPUBuffer buffer);\nWGPU_EXPORT WGPUBufferUsage wgpuBufferGetUsage(WGPUBuffer buffer);\nWGPU_EXPORT void wgpuBufferMapAsync(WGPUBuffer buffer, WGPUMapModeFlags mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata);\nWGPU_EXPORT void wgpuBufferSetLabel(WGPUBuffer buffer, char const * label);\nWGPU_EXPORT void wgpuBufferUnmap(WGPUBuffer buffer);\nWGPU_EXPORT void wgpuBufferReference(WGPUBuffer buffer);\nWGPU_EXPORT void wgpuBufferRelease(WGPUBuffer buffer);\n\n// Methods of CommandBuffer\nWGPU_EXPORT void wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, char const * label);\nWGPU_EXPORT void wgpuCommandBufferReference(WGPUCommandBuffer commandBuffer);\nWGPU_EXPORT void wgpuCommandBufferRelease(WGPUCommandBuffer commandBuffer);\n\n// Methods of CommandEncoder\nWGPU_EXPORT WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, WGPUComputePassDescriptor const * descriptor /* nullable */);\nWGPU_EXPORT WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor const * descriptor);\nWGPU_EXPORT void wgpuCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size);\nWGPU_EXPORT void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size);\nWGPU_EXPORT void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyBuffer const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize);\nWGPU_EXPORT void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyBuffer const * destination, WGPUExtent3D const * copySize);\nWGPU_EXPORT void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize);\nWGPU_EXPORT void wgpuCommandEncoderCopyTextureToTextureInternal(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize);\nWGPU_EXPORT WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, WGPUCommandBufferDescriptor const * descriptor /* nullable */);\nWGPU_EXPORT void wgpuCommandEncoderInjectValidationError(WGPUCommandEncoder commandEncoder, char const * message);\nWGPU_EXPORT void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, char const * markerLabel);\nWGPU_EXPORT void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder);\nWGPU_EXPORT void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, char const * groupLabel);\nWGPU_EXPORT void wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset);\nWGPU_EXPORT void wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, char const * label);\nWGPU_EXPORT void wgpuCommandEncoderWriteBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size);\nWGPU_EXPORT void wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex);\nWGPU_EXPORT void wgpuCommandEncoderReference(WGPUCommandEncoder commandEncoder);\nWGPU_EXPORT void wgpuCommandEncoderRelease(WGPUCommandEncoder commandEncoder);\n\n// Methods of ComputePassEncoder\nWGPU_EXPORT void wgpuComputePassEncoderDispatch(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ);\nWGPU_EXPORT void wgpuComputePassEncoderDispatchIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\nWGPU_EXPORT void wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ);\nWGPU_EXPORT void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\nWGPU_EXPORT void wgpuComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder);\nWGPU_EXPORT void wgpuComputePassEncoderEndPass(WGPUComputePassEncoder computePassEncoder);\nWGPU_EXPORT void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, char const * markerLabel);\nWGPU_EXPORT void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder);\nWGPU_EXPORT void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, char const * groupLabel);\nWGPU_EXPORT void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, uint32_t dynamicOffsetCount, uint32_t const * dynamicOffsets);\nWGPU_EXPORT void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, char const * label);\nWGPU_EXPORT void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline);\nWGPU_EXPORT void wgpuComputePassEncoderWriteTimestamp(WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint32_t queryIndex);\nWGPU_EXPORT void wgpuComputePassEncoderReference(WGPUComputePassEncoder computePassEncoder);\nWGPU_EXPORT void wgpuComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder);\n\n// Methods of ComputePipeline\nWGPU_EXPORT WGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint32_t groupIndex);\nWGPU_EXPORT void wgpuComputePipelineSetLabel(WGPUComputePipeline computePipeline, char const * label);\nWGPU_EXPORT void wgpuComputePipelineReference(WGPUComputePipeline computePipeline);\nWGPU_EXPORT void wgpuComputePipelineRelease(WGPUComputePipeline computePipeline);\n\n// Methods of Device\nWGPU_EXPORT WGPUBindGroup wgpuDeviceCreateBindGroup(WGPUDevice device, WGPUBindGroupDescriptor const * descriptor);\nWGPU_EXPORT WGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WGPUDevice device, WGPUBindGroupLayoutDescriptor const * descriptor);\nWGPU_EXPORT WGPUBuffer wgpuDeviceCreateBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor);\nWGPU_EXPORT WGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WGPUDevice device, WGPUCommandEncoderDescriptor const * descriptor /* nullable */);\nWGPU_EXPORT WGPUComputePipeline wgpuDeviceCreateComputePipeline(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor);\nWGPU_EXPORT void wgpuDeviceCreateComputePipelineAsync(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata);\nWGPU_EXPORT WGPUBuffer wgpuDeviceCreateErrorBuffer(WGPUDevice device);\nWGPU_EXPORT WGPUExternalTexture wgpuDeviceCreateErrorExternalTexture(WGPUDevice device);\nWGPU_EXPORT WGPUTexture wgpuDeviceCreateErrorTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor);\nWGPU_EXPORT WGPUExternalTexture wgpuDeviceCreateExternalTexture(WGPUDevice device, WGPUExternalTextureDescriptor const * externalTextureDescriptor);\nWGPU_EXPORT WGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WGPUDevice device, WGPUPipelineLayoutDescriptor const * descriptor);\nWGPU_EXPORT WGPUQuerySet wgpuDeviceCreateQuerySet(WGPUDevice device, WGPUQuerySetDescriptor const * descriptor);\nWGPU_EXPORT WGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WGPUDevice device, WGPURenderBundleEncoderDescriptor const * descriptor);\nWGPU_EXPORT WGPURenderPipeline wgpuDeviceCreateRenderPipeline(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor);\nWGPU_EXPORT void wgpuDeviceCreateRenderPipelineAsync(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata);\nWGPU_EXPORT WGPUSampler wgpuDeviceCreateSampler(WGPUDevice device, WGPUSamplerDescriptor const * descriptor /* nullable */);\nWGPU_EXPORT WGPUShaderModule wgpuDeviceCreateShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor);\nWGPU_EXPORT WGPUSwapChain wgpuDeviceCreateSwapChain(WGPUDevice device, WGPUSurface surface /* nullable */, WGPUSwapChainDescriptor const * descriptor);\nWGPU_EXPORT WGPUTexture wgpuDeviceCreateTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor);\nWGPU_EXPORT void wgpuDeviceDestroy(WGPUDevice device);\nWGPU_EXPORT size_t wgpuDeviceEnumerateFeatures(WGPUDevice device, WGPUFeatureName * features);\nWGPU_EXPORT void wgpuDeviceForceLoss(WGPUDevice device, WGPUDeviceLostReason type, char const * message);\nWGPU_EXPORT WGPUAdapter wgpuDeviceGetAdapter(WGPUDevice device);\nWGPU_EXPORT bool wgpuDeviceGetLimits(WGPUDevice device, WGPUSupportedLimits * limits);\nWGPU_EXPORT WGPUQueue wgpuDeviceGetQueue(WGPUDevice device);\nWGPU_EXPORT bool wgpuDeviceHasFeature(WGPUDevice device, WGPUFeatureName feature);\nWGPU_EXPORT void wgpuDeviceInjectError(WGPUDevice device, WGPUErrorType type, char const * message);\nWGPU_EXPORT bool wgpuDevicePopErrorScope(WGPUDevice device, WGPUErrorCallback callback, void * userdata);\nWGPU_EXPORT void wgpuDevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter);\nWGPU_EXPORT void wgpuDeviceSetDeviceLostCallback(WGPUDevice device, WGPUDeviceLostCallback callback, void * userdata);\nWGPU_EXPORT void wgpuDeviceSetLabel(WGPUDevice device, char const * label);\nWGPU_EXPORT void wgpuDeviceSetLoggingCallback(WGPUDevice device, WGPULoggingCallback callback, void * userdata);\nWGPU_EXPORT void wgpuDeviceSetUncapturedErrorCallback(WGPUDevice device, WGPUErrorCallback callback, void * userdata);\nWGPU_EXPORT void wgpuDeviceTick(WGPUDevice device);\nWGPU_EXPORT void wgpuDeviceReference(WGPUDevice device);\nWGPU_EXPORT void wgpuDeviceRelease(WGPUDevice device);\n\n// Methods of ExternalTexture\nWGPU_EXPORT void wgpuExternalTextureDestroy(WGPUExternalTexture externalTexture);\nWGPU_EXPORT void wgpuExternalTextureSetLabel(WGPUExternalTexture externalTexture, char const * label);\nWGPU_EXPORT void wgpuExternalTextureReference(WGPUExternalTexture externalTexture);\nWGPU_EXPORT void wgpuExternalTextureRelease(WGPUExternalTexture externalTexture);\n\n// Methods of Instance\nWGPU_EXPORT WGPUSurface wgpuInstanceCreateSurface(WGPUInstance instance, WGPUSurfaceDescriptor const * descriptor);\nWGPU_EXPORT void wgpuInstanceRequestAdapter(WGPUInstance instance, WGPURequestAdapterOptions const * options /* nullable */, WGPURequestAdapterCallback callback, void * userdata);\nWGPU_EXPORT void wgpuInstanceReference(WGPUInstance instance);\nWGPU_EXPORT void wgpuInstanceRelease(WGPUInstance instance);\n\n// Methods of PipelineLayout\nWGPU_EXPORT void wgpuPipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, char const * label);\nWGPU_EXPORT void wgpuPipelineLayoutReference(WGPUPipelineLayout pipelineLayout);\nWGPU_EXPORT void wgpuPipelineLayoutRelease(WGPUPipelineLayout pipelineLayout);\n\n// Methods of QuerySet\nWGPU_EXPORT void wgpuQuerySetDestroy(WGPUQuerySet querySet);\nWGPU_EXPORT uint32_t wgpuQuerySetGetCount(WGPUQuerySet querySet);\nWGPU_EXPORT WGPUQueryType wgpuQuerySetGetType(WGPUQuerySet querySet);\nWGPU_EXPORT void wgpuQuerySetSetLabel(WGPUQuerySet querySet, char const * label);\nWGPU_EXPORT void wgpuQuerySetReference(WGPUQuerySet querySet);\nWGPU_EXPORT void wgpuQuerySetRelease(WGPUQuerySet querySet);\n\n// Methods of Queue\nWGPU_EXPORT void wgpuQueueCopyExternalTextureForBrowser(WGPUQueue queue, WGPUImageCopyExternalTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options);\nWGPU_EXPORT void wgpuQueueCopyTextureForBrowser(WGPUQueue queue, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options);\nWGPU_EXPORT void wgpuQueueOnSubmittedWorkDone(WGPUQueue queue, uint64_t signalValue, WGPUQueueWorkDoneCallback callback, void * userdata);\nWGPU_EXPORT void wgpuQueueSetLabel(WGPUQueue queue, char const * label);\nWGPU_EXPORT void wgpuQueueSubmit(WGPUQueue queue, uint32_t commandCount, WGPUCommandBuffer const * commands);\nWGPU_EXPORT void wgpuQueueWriteBuffer(WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, void const * data, size_t size);\nWGPU_EXPORT void wgpuQueueWriteTexture(WGPUQueue queue, WGPUImageCopyTexture const * destination, void const * data, size_t dataSize, WGPUTextureDataLayout const * dataLayout, WGPUExtent3D const * writeSize);\nWGPU_EXPORT void wgpuQueueReference(WGPUQueue queue);\nWGPU_EXPORT void wgpuQueueRelease(WGPUQueue queue);\n\n// Methods of RenderBundle\nWGPU_EXPORT void wgpuRenderBundleReference(WGPURenderBundle renderBundle);\nWGPU_EXPORT void wgpuRenderBundleRelease(WGPURenderBundle renderBundle);\n\n// Methods of RenderBundleEncoder\nWGPU_EXPORT void wgpuRenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);\nWGPU_EXPORT void wgpuRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance);\nWGPU_EXPORT void wgpuRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\nWGPU_EXPORT void wgpuRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\nWGPU_EXPORT WGPURenderBundle wgpuRenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderBundleDescriptor const * descriptor /* nullable */);\nWGPU_EXPORT void wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, char const * markerLabel);\nWGPU_EXPORT void wgpuRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder);\nWGPU_EXPORT void wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, char const * groupLabel);\nWGPU_EXPORT void wgpuRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPUBindGroup group, uint32_t dynamicOffsetCount, uint32_t const * dynamicOffsets);\nWGPU_EXPORT void wgpuRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size);\nWGPU_EXPORT void wgpuRenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, char const * label);\nWGPU_EXPORT void wgpuRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline);\nWGPU_EXPORT void wgpuRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size);\nWGPU_EXPORT void wgpuRenderBundleEncoderReference(WGPURenderBundleEncoder renderBundleEncoder);\nWGPU_EXPORT void wgpuRenderBundleEncoderRelease(WGPURenderBundleEncoder renderBundleEncoder);\n\n// Methods of RenderPassEncoder\nWGPU_EXPORT void wgpuRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder renderPassEncoder, uint32_t queryIndex);\nWGPU_EXPORT void wgpuRenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);\nWGPU_EXPORT void wgpuRenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance);\nWGPU_EXPORT void wgpuRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\nWGPU_EXPORT void wgpuRenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\nWGPU_EXPORT void wgpuRenderPassEncoderEnd(WGPURenderPassEncoder renderPassEncoder);\nWGPU_EXPORT void wgpuRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder renderPassEncoder);\nWGPU_EXPORT void wgpuRenderPassEncoderEndPass(WGPURenderPassEncoder renderPassEncoder);\nWGPU_EXPORT void wgpuRenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, uint32_t bundleCount, WGPURenderBundle const * bundles);\nWGPU_EXPORT void wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, char const * markerLabel);\nWGPU_EXPORT void wgpuRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder);\nWGPU_EXPORT void wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, char const * groupLabel);\nWGPU_EXPORT void wgpuRenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPUBindGroup group, uint32_t dynamicOffsetCount, uint32_t const * dynamicOffsets);\nWGPU_EXPORT void wgpuRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder renderPassEncoder, WGPUColor const * color);\nWGPU_EXPORT void wgpuRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size);\nWGPU_EXPORT void wgpuRenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, char const * label);\nWGPU_EXPORT void wgpuRenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline);\nWGPU_EXPORT void wgpuRenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height);\nWGPU_EXPORT void wgpuRenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint32_t reference);\nWGPU_EXPORT void wgpuRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size);\nWGPU_EXPORT void wgpuRenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);\nWGPU_EXPORT void wgpuRenderPassEncoderWriteTimestamp(WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint32_t queryIndex);\nWGPU_EXPORT void wgpuRenderPassEncoderReference(WGPURenderPassEncoder renderPassEncoder);\nWGPU_EXPORT void wgpuRenderPassEncoderRelease(WGPURenderPassEncoder renderPassEncoder);\n\n// Methods of RenderPipeline\nWGPU_EXPORT WGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint32_t groupIndex);\nWGPU_EXPORT void wgpuRenderPipelineSetLabel(WGPURenderPipeline renderPipeline, char const * label);\nWGPU_EXPORT void wgpuRenderPipelineReference(WGPURenderPipeline renderPipeline);\nWGPU_EXPORT void wgpuRenderPipelineRelease(WGPURenderPipeline renderPipeline);\n\n// Methods of Sampler\nWGPU_EXPORT void wgpuSamplerSetLabel(WGPUSampler sampler, char const * label);\nWGPU_EXPORT void wgpuSamplerReference(WGPUSampler sampler);\nWGPU_EXPORT void wgpuSamplerRelease(WGPUSampler sampler);\n\n// Methods of ShaderModule\nWGPU_EXPORT void wgpuShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, WGPUCompilationInfoCallback callback, void * userdata);\nWGPU_EXPORT void wgpuShaderModuleSetLabel(WGPUShaderModule shaderModule, char const * label);\nWGPU_EXPORT void wgpuShaderModuleReference(WGPUShaderModule shaderModule);\nWGPU_EXPORT void wgpuShaderModuleRelease(WGPUShaderModule shaderModule);\n\n// Methods of Surface\nWGPU_EXPORT void wgpuSurfaceReference(WGPUSurface surface);\nWGPU_EXPORT void wgpuSurfaceRelease(WGPUSurface surface);\n\n// Methods of SwapChain\nWGPU_EXPORT void wgpuSwapChainConfigure(WGPUSwapChain swapChain, WGPUTextureFormat format, WGPUTextureUsageFlags allowedUsage, uint32_t width, uint32_t height);\nWGPU_EXPORT WGPUTextureView wgpuSwapChainGetCurrentTextureView(WGPUSwapChain swapChain);\nWGPU_EXPORT void wgpuSwapChainPresent(WGPUSwapChain swapChain);\nWGPU_EXPORT void wgpuSwapChainReference(WGPUSwapChain swapChain);\nWGPU_EXPORT void wgpuSwapChainRelease(WGPUSwapChain swapChain);\n\n// Methods of Texture\nWGPU_EXPORT WGPUTextureView wgpuTextureCreateView(WGPUTexture texture, WGPUTextureViewDescriptor const * descriptor /* nullable */);\nWGPU_EXPORT void wgpuTextureDestroy(WGPUTexture texture);\nWGPU_EXPORT uint32_t wgpuTextureGetDepthOrArrayLayers(WGPUTexture texture);\nWGPU_EXPORT WGPUTextureDimension wgpuTextureGetDimension(WGPUTexture texture);\nWGPU_EXPORT WGPUTextureFormat wgpuTextureGetFormat(WGPUTexture texture);\nWGPU_EXPORT uint32_t wgpuTextureGetHeight(WGPUTexture texture);\nWGPU_EXPORT uint32_t wgpuTextureGetMipLevelCount(WGPUTexture texture);\nWGPU_EXPORT uint32_t wgpuTextureGetSampleCount(WGPUTexture texture);\nWGPU_EXPORT WGPUTextureUsage wgpuTextureGetUsage(WGPUTexture texture);\nWGPU_EXPORT uint32_t wgpuTextureGetWidth(WGPUTexture texture);\nWGPU_EXPORT void wgpuTextureSetLabel(WGPUTexture texture, char const * label);\nWGPU_EXPORT void wgpuTextureReference(WGPUTexture texture);\nWGPU_EXPORT void wgpuTextureRelease(WGPUTexture texture);\n\n// Methods of TextureView\nWGPU_EXPORT void wgpuTextureViewSetLabel(WGPUTextureView textureView, char const * label);\nWGPU_EXPORT void wgpuTextureViewReference(WGPUTextureView textureView);\nWGPU_EXPORT void wgpuTextureViewRelease(WGPUTextureView textureView);\n\n#endif  // !defined(WGPU_SKIP_DECLARATIONS)\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#endif // WEBGPU_H_\n", "include/dawn/dawn_proc_table.h": "\n#ifndef DAWN_DAWN_PROC_TABLE_H_\n#define DAWN_DAWN_PROC_TABLE_H_\n\n#include \"dawn/webgpu.h\"\n\n// Note: Often allocated as a static global. Do not add a complex constructor.\ntypedef struct DawnProcTable {\n    WGPUProcCreateInstance createInstance;\n    WGPUProcGetProcAddress getProcAddress;\n\n    WGPUProcAdapterCreateDevice adapterCreateDevice;\n    WGPUProcAdapterEnumerateFeatures adapterEnumerateFeatures;\n    WGPUProcAdapterGetLimits adapterGetLimits;\n    WGPUProcAdapterGetProperties adapterGetProperties;\n    WGPUProcAdapterHasFeature adapterHasFeature;\n    WGPUProcAdapterRequestDevice adapterRequestDevice;\n    WGPUProcAdapterReference adapterReference;\n    WGPUProcAdapterRelease adapterRelease;\n\n    WGPUProcBindGroupSetLabel bindGroupSetLabel;\n    WGPUProcBindGroupReference bindGroupReference;\n    WGPUProcBindGroupRelease bindGroupRelease;\n\n    WGPUProcBindGroupLayoutSetLabel bindGroupLayoutSetLabel;\n    WGPUProcBindGroupLayoutReference bindGroupLayoutReference;\n    WGPUProcBindGroupLayoutRelease bindGroupLayoutRelease;\n\n    WGPUProcBufferDestroy bufferDestroy;\n    WGPUProcBufferGetConstMappedRange bufferGetConstMappedRange;\n    WGPUProcBufferGetMappedRange bufferGetMappedRange;\n    WGPUProcBufferGetSize bufferGetSize;\n    WGPUProcBufferGetUsage bufferGetUsage;\n    WGPUProcBufferMapAsync bufferMapAsync;\n    WGPUProcBufferSetLabel bufferSetLabel;\n    WGPUProcBufferUnmap bufferUnmap;\n    WGPUProcBufferReference bufferReference;\n    WGPUProcBufferRelease bufferRelease;\n\n    WGPUProcCommandBufferSetLabel commandBufferSetLabel;\n    WGPUProcCommandBufferReference commandBufferReference;\n    WGPUProcCommandBufferRelease commandBufferRelease;\n\n    WGPUProcCommandEncoderBeginComputePass commandEncoderBeginComputePass;\n    WGPUProcCommandEncoderBeginRenderPass commandEncoderBeginRenderPass;\n    WGPUProcCommandEncoderClearBuffer commandEncoderClearBuffer;\n    WGPUProcCommandEncoderCopyBufferToBuffer commandEncoderCopyBufferToBuffer;\n    WGPUProcCommandEncoderCopyBufferToTexture commandEncoderCopyBufferToTexture;\n    WGPUProcCommandEncoderCopyTextureToBuffer commandEncoderCopyTextureToBuffer;\n    WGPUProcCommandEncoderCopyTextureToTexture commandEncoderCopyTextureToTexture;\n    WGPUProcCommandEncoderCopyTextureToTextureInternal commandEncoderCopyTextureToTextureInternal;\n    WGPUProcCommandEncoderFinish commandEncoderFinish;\n    WGPUProcCommandEncoderInjectValidationError commandEncoderInjectValidationError;\n    WGPUProcCommandEncoderInsertDebugMarker commandEncoderInsertDebugMarker;\n    WGPUProcCommandEncoderPopDebugGroup commandEncoderPopDebugGroup;\n    WGPUProcCommandEncoderPushDebugGroup commandEncoderPushDebugGroup;\n    WGPUProcCommandEncoderResolveQuerySet commandEncoderResolveQuerySet;\n    WGPUProcCommandEncoderSetLabel commandEncoderSetLabel;\n    WGPUProcCommandEncoderWriteBuffer commandEncoderWriteBuffer;\n    WGPUProcCommandEncoderWriteTimestamp commandEncoderWriteTimestamp;\n    WGPUProcCommandEncoderReference commandEncoderReference;\n    WGPUProcCommandEncoderRelease commandEncoderRelease;\n\n    WGPUProcComputePassEncoderDispatch computePassEncoderDispatch;\n    WGPUProcComputePassEncoderDispatchIndirect computePassEncoderDispatchIndirect;\n    WGPUProcComputePassEncoderDispatchWorkgroups computePassEncoderDispatchWorkgroups;\n    WGPUProcComputePassEncoderDispatchWorkgroupsIndirect computePassEncoderDispatchWorkgroupsIndirect;\n    WGPUProcComputePassEncoderEnd computePassEncoderEnd;\n    WGPUProcComputePassEncoderEndPass computePassEncoderEndPass;\n    WGPUProcComputePassEncoderInsertDebugMarker computePassEncoderInsertDebugMarker;\n    WGPUProcComputePassEncoderPopDebugGroup computePassEncoderPopDebugGroup;\n    WGPUProcComputePassEncoderPushDebugGroup computePassEncoderPushDebugGroup;\n    WGPUProcComputePassEncoderSetBindGroup computePassEncoderSetBindGroup;\n    WGPUProcComputePassEncoderSetLabel computePassEncoderSetLabel;\n    WGPUProcComputePassEncoderSetPipeline computePassEncoderSetPipeline;\n    WGPUProcComputePassEncoderWriteTimestamp computePassEncoderWriteTimestamp;\n    WGPUProcComputePassEncoderReference computePassEncoderReference;\n    WGPUProcComputePassEncoderRelease computePassEncoderRelease;\n\n    WGPUProcComputePipelineGetBindGroupLayout computePipelineGetBindGroupLayout;\n    WGPUProcComputePipelineSetLabel computePipelineSetLabel;\n    WGPUProcComputePipelineReference computePipelineReference;\n    WGPUProcComputePipelineRelease computePipelineRelease;\n\n    WGPUProcDeviceCreateBindGroup deviceCreateBindGroup;\n    WGPUProcDeviceCreateBindGroupLayout deviceCreateBindGroupLayout;\n    WGPUProcDeviceCreateBuffer deviceCreateBuffer;\n    WGPUProcDeviceCreateCommandEncoder deviceCreateCommandEncoder;\n    WGPUProcDeviceCreateComputePipeline deviceCreateComputePipeline;\n    WGPUProcDeviceCreateComputePipelineAsync deviceCreateComputePipelineAsync;\n    WGPUProcDeviceCreateErrorBuffer deviceCreateErrorBuffer;\n    WGPUProcDeviceCreateErrorExternalTexture deviceCreateErrorExternalTexture;\n    WGPUProcDeviceCreateErrorTexture deviceCreateErrorTexture;\n    WGPUProcDeviceCreateExternalTexture deviceCreateExternalTexture;\n    WGPUProcDeviceCreatePipelineLayout deviceCreatePipelineLayout;\n    WGPUProcDeviceCreateQuerySet deviceCreateQuerySet;\n    WGPUProcDeviceCreateRenderBundleEncoder deviceCreateRenderBundleEncoder;\n    WGPUProcDeviceCreateRenderPipeline deviceCreateRenderPipeline;\n    WGPUProcDeviceCreateRenderPipelineAsync deviceCreateRenderPipelineAsync;\n    WGPUProcDeviceCreateSampler deviceCreateSampler;\n    WGPUProcDeviceCreateShaderModule deviceCreateShaderModule;\n    WGPUProcDeviceCreateSwapChain deviceCreateSwapChain;\n    WGPUProcDeviceCreateTexture deviceCreateTexture;\n    WGPUProcDeviceDestroy deviceDestroy;\n    WGPUProcDeviceEnumerateFeatures deviceEnumerateFeatures;\n    WGPUProcDeviceForceLoss deviceForceLoss;\n    WGPUProcDeviceGetAdapter deviceGetAdapter;\n    WGPUProcDeviceGetLimits deviceGetLimits;\n    WGPUProcDeviceGetQueue deviceGetQueue;\n    WGPUProcDeviceHasFeature deviceHasFeature;\n    WGPUProcDeviceInjectError deviceInjectError;\n    WGPUProcDevicePopErrorScope devicePopErrorScope;\n    WGPUProcDevicePushErrorScope devicePushErrorScope;\n    WGPUProcDeviceSetDeviceLostCallback deviceSetDeviceLostCallback;\n    WGPUProcDeviceSetLabel deviceSetLabel;\n    WGPUProcDeviceSetLoggingCallback deviceSetLoggingCallback;\n    WGPUProcDeviceSetUncapturedErrorCallback deviceSetUncapturedErrorCallback;\n    WGPUProcDeviceTick deviceTick;\n    WGPUProcDeviceReference deviceReference;\n    WGPUProcDeviceRelease deviceRelease;\n\n    WGPUProcExternalTextureDestroy externalTextureDestroy;\n    WGPUProcExternalTextureSetLabel externalTextureSetLabel;\n    WGPUProcExternalTextureReference externalTextureReference;\n    WGPUProcExternalTextureRelease externalTextureRelease;\n\n    WGPUProcInstanceCreateSurface instanceCreateSurface;\n    WGPUProcInstanceRequestAdapter instanceRequestAdapter;\n    WGPUProcInstanceReference instanceReference;\n    WGPUProcInstanceRelease instanceRelease;\n\n    WGPUProcPipelineLayoutSetLabel pipelineLayoutSetLabel;\n    WGPUProcPipelineLayoutReference pipelineLayoutReference;\n    WGPUProcPipelineLayoutRelease pipelineLayoutRelease;\n\n    WGPUProcQuerySetDestroy querySetDestroy;\n    WGPUProcQuerySetGetCount querySetGetCount;\n    WGPUProcQuerySetGetType querySetGetType;\n    WGPUProcQuerySetSetLabel querySetSetLabel;\n    WGPUProcQuerySetReference querySetReference;\n    WGPUProcQuerySetRelease querySetRelease;\n\n    WGPUProcQueueCopyExternalTextureForBrowser queueCopyExternalTextureForBrowser;\n    WGPUProcQueueCopyTextureForBrowser queueCopyTextureForBrowser;\n    WGPUProcQueueOnSubmittedWorkDone queueOnSubmittedWorkDone;\n    WGPUProcQueueSetLabel queueSetLabel;\n    WGPUProcQueueSubmit queueSubmit;\n    WGPUProcQueueWriteBuffer queueWriteBuffer;\n    WGPUProcQueueWriteTexture queueWriteTexture;\n    WGPUProcQueueReference queueReference;\n    WGPUProcQueueRelease queueRelease;\n\n    WGPUProcRenderBundleReference renderBundleReference;\n    WGPUProcRenderBundleRelease renderBundleRelease;\n\n    WGPUProcRenderBundleEncoderDraw renderBundleEncoderDraw;\n    WGPUProcRenderBundleEncoderDrawIndexed renderBundleEncoderDrawIndexed;\n    WGPUProcRenderBundleEncoderDrawIndexedIndirect renderBundleEncoderDrawIndexedIndirect;\n    WGPUProcRenderBundleEncoderDrawIndirect renderBundleEncoderDrawIndirect;\n    WGPUProcRenderBundleEncoderFinish renderBundleEncoderFinish;\n    WGPUProcRenderBundleEncoderInsertDebugMarker renderBundleEncoderInsertDebugMarker;\n    WGPUProcRenderBundleEncoderPopDebugGroup renderBundleEncoderPopDebugGroup;\n    WGPUProcRenderBundleEncoderPushDebugGroup renderBundleEncoderPushDebugGroup;\n    WGPUProcRenderBundleEncoderSetBindGroup renderBundleEncoderSetBindGroup;\n    WGPUProcRenderBundleEncoderSetIndexBuffer renderBundleEncoderSetIndexBuffer;\n    WGPUProcRenderBundleEncoderSetLabel renderBundleEncoderSetLabel;\n    WGPUProcRenderBundleEncoderSetPipeline renderBundleEncoderSetPipeline;\n    WGPUProcRenderBundleEncoderSetVertexBuffer renderBundleEncoderSetVertexBuffer;\n    WGPUProcRenderBundleEncoderReference renderBundleEncoderReference;\n    WGPUProcRenderBundleEncoderRelease renderBundleEncoderRelease;\n\n    WGPUProcRenderPassEncoderBeginOcclusionQuery renderPassEncoderBeginOcclusionQuery;\n    WGPUProcRenderPassEncoderDraw renderPassEncoderDraw;\n    WGPUProcRenderPassEncoderDrawIndexed renderPassEncoderDrawIndexed;\n    WGPUProcRenderPassEncoderDrawIndexedIndirect renderPassEncoderDrawIndexedIndirect;\n    WGPUProcRenderPassEncoderDrawIndirect renderPassEncoderDrawIndirect;\n    WGPUProcRenderPassEncoderEnd renderPassEncoderEnd;\n    WGPUProcRenderPassEncoderEndOcclusionQuery renderPassEncoderEndOcclusionQuery;\n    WGPUProcRenderPassEncoderEndPass renderPassEncoderEndPass;\n    WGPUProcRenderPassEncoderExecuteBundles renderPassEncoderExecuteBundles;\n    WGPUProcRenderPassEncoderInsertDebugMarker renderPassEncoderInsertDebugMarker;\n    WGPUProcRenderPassEncoderPopDebugGroup renderPassEncoderPopDebugGroup;\n    WGPUProcRenderPassEncoderPushDebugGroup renderPassEncoderPushDebugGroup;\n    WGPUProcRenderPassEncoderSetBindGroup renderPassEncoderSetBindGroup;\n    WGPUProcRenderPassEncoderSetBlendConstant renderPassEncoderSetBlendConstant;\n    WGPUProcRenderPassEncoderSetIndexBuffer renderPassEncoderSetIndexBuffer;\n    WGPUProcRenderPassEncoderSetLabel renderPassEncoderSetLabel;\n    WGPUProcRenderPassEncoderSetPipeline renderPassEncoderSetPipeline;\n    WGPUProcRenderPassEncoderSetScissorRect renderPassEncoderSetScissorRect;\n    WGPUProcRenderPassEncoderSetStencilReference renderPassEncoderSetStencilReference;\n    WGPUProcRenderPassEncoderSetVertexBuffer renderPassEncoderSetVertexBuffer;\n    WGPUProcRenderPassEncoderSetViewport renderPassEncoderSetViewport;\n    WGPUProcRenderPassEncoderWriteTimestamp renderPassEncoderWriteTimestamp;\n    WGPUProcRenderPassEncoderReference renderPassEncoderReference;\n    WGPUProcRenderPassEncoderRelease renderPassEncoderRelease;\n\n    WGPUProcRenderPipelineGetBindGroupLayout renderPipelineGetBindGroupLayout;\n    WGPUProcRenderPipelineSetLabel renderPipelineSetLabel;\n    WGPUProcRenderPipelineReference renderPipelineReference;\n    WGPUProcRenderPipelineRelease renderPipelineRelease;\n\n    WGPUProcSamplerSetLabel samplerSetLabel;\n    WGPUProcSamplerReference samplerReference;\n    WGPUProcSamplerRelease samplerRelease;\n\n    WGPUProcShaderModuleGetCompilationInfo shaderModuleGetCompilationInfo;\n    WGPUProcShaderModuleSetLabel shaderModuleSetLabel;\n    WGPUProcShaderModuleReference shaderModuleReference;\n    WGPUProcShaderModuleRelease shaderModuleRelease;\n\n    WGPUProcSurfaceReference surfaceReference;\n    WGPUProcSurfaceRelease surfaceRelease;\n\n    WGPUProcSwapChainConfigure swapChainConfigure;\n    WGPUProcSwapChainGetCurrentTextureView swapChainGetCurrentTextureView;\n    WGPUProcSwapChainPresent swapChainPresent;\n    WGPUProcSwapChainReference swapChainReference;\n    WGPUProcSwapChainRelease swapChainRelease;\n\n    WGPUProcTextureCreateView textureCreateView;\n    WGPUProcTextureDestroy textureDestroy;\n    WGPUProcTextureGetDepthOrArrayLayers textureGetDepthOrArrayLayers;\n    WGPUProcTextureGetDimension textureGetDimension;\n    WGPUProcTextureGetFormat textureGetFormat;\n    WGPUProcTextureGetHeight textureGetHeight;\n    WGPUProcTextureGetMipLevelCount textureGetMipLevelCount;\n    WGPUProcTextureGetSampleCount textureGetSampleCount;\n    WGPUProcTextureGetUsage textureGetUsage;\n    WGPUProcTextureGetWidth textureGetWidth;\n    WGPUProcTextureSetLabel textureSetLabel;\n    WGPUProcTextureReference textureReference;\n    WGPUProcTextureRelease textureRelease;\n\n    WGPUProcTextureViewSetLabel textureViewSetLabel;\n    WGPUProcTextureViewReference textureViewReference;\n    WGPUProcTextureViewRelease textureViewRelease;\n\n} DawnProcTable;\n\n#endif  // DAWN_DAWN_PROC_TABLE_H_\n"}